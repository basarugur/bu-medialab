
#line 3 "vrml1-scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1005] =
    {   0,
        0,    0,  154,  152,  150,  151,  149,  152,  148,  143,
      144,  146,  152,  152,    1,    2,    4,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  141,  142,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  139,  145,  140,    0,  138,
        0,  148,  148,    0,    4,    5,    5,    4,    0,    0,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,   37,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  108,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,    0,  148,    5,    5,    0,    0,    5,
        0,    0,    5,    3,    6,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   20,  137,
      137,  137,  137,  137,  137,   29,  137,  137,  137,   36,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,   63,
      137,  137,  137,  137,  137,   74,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      102,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
        0,  148,    0,    5,    0,    0,    5,    0,    5,    0,
        0,    5,    7,  137,    9,  137,  137,  137,  137,  137,

      137,   16,  137,   18,  137,  137,  137,  137,  137,  137,
      137,   28,  137,  137,   33,  137,  137,  137,    0,  137,
      137,  137,  137,  137,  137,   53,  137,  137,  137,  137,
      137,  137,  137,  137,  137,   64,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  105,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  121,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  148,    0,    5,    0,    0,

        5,    0,    5,  137,  137,  137,   12,  137,  137,  137,
      137,  137,  137,  137,   23,  137,  137,  137,  137,  137,
      137,  137,  137,    0,    0,    0,   46,  137,  137,  137,
       51,  137,   54,   55,   56,   57,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,   82,  137,  137,  137,   86,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   98,  137,
      137,  137,  137,  137,  137,  137,  137,  110,  111,  137,
      137,  114,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  126,  137,  137,  130,  137,  137,  137,  134,  135,

      136,  148,    0,    5,  137,   10,   11,  137,   14,  137,
      137,  137,  137,  137,  137,   25,  137,  137,  137,   34,
      137,  137,    0,    0,    0,  137,  137,  137,   50,  137,
      137,  137,   60,  137,   62,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   81,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   93,  137,  137,
       96,  137,  137,  137,  137,  104,  137,  137,  137,  137,
      113,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      125,  137,  137,  137,  131,  137,  137,  148,  137,  137,
      137,  137,  137,   21,  137,  137,  137,  137,  137,  137,

       38,  137,    0,    0,    0,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      122,  137,  137,  137,  137,  137,  137,  137,  148,  137,
      137,  137,  137,   19,  137,  137,  137,  137,   30,  137,
      137,  137,   40,   42,    0,  137,  137,   49,   52,  137,
      137,  137,  137,   66,  137,  137,  137,    0,    0,  137,
      137,  137,  137,   79,  137,  137,  137,  137,  137,  137,

      137,  137,  137,   92,   94,  137,  137,  137,  137,  101,
      137,  137,  137,  137,  112,  137,  116,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  148,    8,
       13,  137,  137,  137,   24,  137,  137,  137,  137,  137,
      137,    0,    0,    0,  137,  137,   58,  137,   61,  137,
      137,  137,   69,  137,    0,    0,    0,   75,   76,  137,
      137,  137,  137,  137,  137,  137,  137,   89,  137,  137,
      137,  137,   99,  137,  137,  137,  107,  137,  137,  137,
      137,  119,  120,  137,  137,  137,  137,  137,  137,  137,
      148,  137,  137,  137,  137,  137,  137,  137,  137,  137,

        0,    0,   44,  137,   48,   59,   65,  137,  137,  137,
        0,    0,    0,  137,   78,  137,   83,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  124,  137,  137,  137,  137,  133,  148,
      137,   17,  137,  137,  137,  137,  137,  137,  137,    0,
        0,    0,  137,  137,  137,   70,    0,    0,    0,  137,
      137,   84,   85,   87,  137,   90,  137,  137,   97,  137,
      137,  106,  109,  137,  117,  137,  137,  137,  128,  137,
      137,  148,  137,  137,  137,  137,  137,  137,  137,  137,
        0,    0,    0,  137,  137,  137,    0,    0,    0,   77,

       80,   88,  137,  137,  137,  137,  137,  137,  137,  137,
      129,  137,  148,  137,  137,  137,  137,  137,  137,   35,
      137,    0,    0,    0,  137,  137,  137,    0,    0,    0,
       91,   95,  100,  103,  115,  137,  123,  137,  137,  148,
      137,  137,   26,   27,  137,  137,  137,    0,    0,    0,
      137,  137,  137,    0,    0,    0,  137,  137,  132,  148,
      137,  137,   31,   32,  137,    0,    0,    0,  137,  137,
      137,    0,    0,    0,  137,  137,  147,   15,   22,  137,
       41,   43,    0,  137,  137,  137,    0,   72,    0,  118,
      137,  137,    0,   47,   67,  137,   71,    0,  127,   39,

       45,   68,   73,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   28,
       43,   44,   45,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   28,   57,   58,   59,
       60,   61,   28,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1012] =
    {   0,
        0,    0,  390, 6801, 6801, 6801, 6801,   68,  350, 6801,
     6801, 6801,   62,   67,   73,   84,  102,  112,  122,  162,
      129,  142,  147,  153,  163,  183,  180,  202,  191,  206,
      257,  232,  298,  321, 6801, 6801,  326,  331,  240,  337,
      342,  348,  353,  358,  395,  404,  409,  263,  414,  419,
      424,  431,  436,  485,  490, 6801, 6801, 6801,   87, 6801,
        0,    0,  352,  495,  502,  512,  523,  541,  555,    0,
        0,  533,  561,  566,  571,  579,  590,  596,  609,  584,
      616,  621,  634,  639,  645,  651,  665,  656,  671,  676,
      697,  702,  707,  712,  723,  728,  738,  748,  757,  762,

      771,  776,  781,  797,  802,  813,  821,  835,  840,  852,
      857,  862,  868,  874,  879,  884,  910,  915,  920,  925,
      936,  941,  949,  954,  965,  970,  977,  982,  987,  997,
     1005, 1017, 1022, 1027, 1037, 1046, 1052, 1059, 1073, 1078,
     1088, 1093, 1098, 1103, 1114, 1123, 1128, 1139, 1148, 1153,
     1158, 1166, 1171, 1213, 1218, 1223, 1228, 1233, 1238, 1244,
     1257, 1272, 1283,   88,  355, 1293, 1303, 1317, 1331, 1341,
     1351, 1322, 1356,    0, 1361, 1366, 1371, 1379, 1388, 1393,
     1398, 1403, 1417, 1422, 1427, 1432, 1444, 1449, 1454, 1465,
     1470, 1475, 1482, 1493, 1503, 1508, 1513, 1518, 1531, 1536,

     1541, 1551, 1556, 1563, 1568, 1576, 1583, 1593, 1598, 1606,
     1611, 1632, 1642, 1647, 1656, 1661, 1666, 1671, 1676, 1681,
     1691, 1709, 1727, 1733, 1738, 1743, 1748, 1762, 1767, 1772,
     1779, 1784, 1789, 1794, 1804, 1809, 1814, 1831, 1838, 1843,
     1850, 1860, 1870, 1876, 1881, 1891, 1900, 1905, 1915, 1920,
     1925, 1931, 1943, 1948, 1954, 1959, 1969, 1981, 1986, 1997,
     2002, 2007, 2012, 2020, 2028, 2033, 2046, 2051, 2056, 2064,
     2069, 2092, 2097, 2103, 2113, 2118, 2123, 2128, 2136, 2141,
       89,  355, 2153, 2158, 2174, 2179, 2189, 2196, 2201, 2210,
     2215, 2220, 2225, 2230, 2235, 2240, 2245, 2260, 2266, 2273,

     2283, 2288, 2293, 2298, 2307, 2312, 2318, 2323, 2337, 2342,
     2347, 2360, 2365, 2370, 2375, 2381, 2386, 2392,  148, 2402,
     2415, 2420, 2426, 2432, 2439, 2444, 2449, 2463, 2471, 2480,
     2490, 2495, 2500, 2505, 2510, 2522, 2527, 2533, 2539, 2554,
     2559, 2564, 2574, 2590, 2598, 2613, 2618, 2623, 2628, 2633,
     2638, 2645, 2651, 2660, 2672, 2679, 2684, 2696, 2708, 2713,
     2718, 2723, 2729, 2734, 2740, 2745, 2761, 2766, 2776, 2781,
     2794, 2803, 2810, 2815, 2820, 2829, 2840, 2834, 2845, 2853,
     2872, 2885, 2891, 2896, 2901, 2907, 2916, 2921, 2926, 2933,
     2938, 2954, 2959, 2964, 2978,  378, 2985, 2992, 3007, 3012,

     3017, 3022, 3027, 3032, 3037, 3042, 3047, 3056, 3064, 3069,
     3083, 3092, 3097, 3102, 3107, 3114, 3119, 3129, 3134, 3139,
     3144, 3153, 3158,  363,  362,  357, 3170, 3176, 3182, 3188,
     3199, 3205, 3214, 3219, 3224, 3229, 3234, 3239, 3252, 3257,
     3262, 3269, 3274, 3280, 3291, 3305, 3310, 3325, 3330, 3335,
     3340, 3346, 3351, 3356, 3361, 3376, 3382, 3391, 3400, 3405,
     3414, 3421, 3426, 3431, 3436, 3442, 3447, 3468, 3476, 3481,
     3493, 3498, 3503, 3508, 3513, 3519, 3524, 3532, 3545, 3550,
     3563, 3568, 3575, 3580, 3585, 3596, 3605, 3613, 3624, 3629,
     3634, 3643, 3651, 3659, 3668, 3674, 3679, 3684, 3692, 3707,

     3712,  339, 3717, 3723, 3728, 3734, 3739, 3744, 3749, 3758,
     3766, 3771, 3780, 3785, 3790, 3795, 3812, 3817, 3828, 3833,
     3840, 3857,  356,  315,  298, 3862, 3867, 3872, 3877, 3882,
     3887, 3892, 3898, 3910, 3915, 3921, 3938, 3943, 3950, 3955,
     3960, 3965, 3984, 3990, 3996, 4006, 4011, 4016, 4026, 4033,
     4042, 4048, 4053, 4063, 4072, 4077, 4083, 4096, 4105, 4111,
     4116, 4122, 4131, 4136, 4141, 4153, 4158, 4164, 4175, 4183,
     4188, 4193, 4201, 4210, 4215, 4220, 4230, 4235, 4248, 4253,
     4258, 4268, 4276, 4282, 4287, 4292, 4299,  316, 4316, 4321,
     4326, 4334, 4344, 4349, 4354, 4359, 4371, 4376, 4382, 4393,

     4403, 4408,  306,  290,  288, 4413, 4420, 4425, 4435, 4442,
     4447, 4453, 4464, 4469, 4481, 4494, 4499, 4504, 4509, 4514,
     4519, 4537, 4545, 4550, 4560, 4565, 4570, 4575, 4588, 4597,
     4602, 4616, 4626, 4631, 4636, 4644, 4654, 4670, 4675, 4680,
     4690, 4695, 4706, 4712, 4724, 4729, 4736, 4746, 4751, 4758,
     4763, 4776, 4781, 4788, 4799, 4808, 4818, 4826,  308, 4831,
     4836, 4857, 4850, 4868, 4874, 4883, 4888, 4893, 4901, 4908,
     4913, 4922,  274,  273,  284, 4927, 4935, 4942, 4947, 4952,
     4959, 4970, 4976,  267, 4986, 4991, 5001,   80,  267, 5010,
     5015, 5021, 5026, 5036, 5043, 5053, 5068, 5073, 5080, 5085,

     5091, 5096, 5101, 5113, 5122, 5137, 5142, 5147, 5152, 5157,
     5162, 5167, 5176, 5188, 5193, 5204, 5209, 5214, 5219, 5230,
     5235, 5241, 5249, 5257, 5268, 5273, 5278, 5287,  285, 5292,
     5297, 5304, 5315, 5324, 5331, 5336, 5341, 5346, 5358, 5363,
     5372,  271,  268,  248, 5377, 5388, 5393, 5404, 5413, 5418,
      226, 5423, 5430, 5440,  266,  247,  255, 5445, 5454, 5459,
     5464, 5470, 5475, 5480, 5487, 5492, 5497, 5503, 5513, 5518,
     5524, 5531, 5541, 5546, 5552, 5558, 5565, 5575, 5580, 5585,
     5590, 5598, 5603, 5608, 5613, 5624, 5636, 5641, 5646, 5655,
      274, 5661, 5671, 5676, 5692, 5697, 5702, 5707, 5712, 5720,

      246,  245,  226, 5735, 5740, 5748, 5762,  222, 5767, 5773,
      247,  239,  240, 5778, 5783, 5788, 5793, 5798, 5803, 5808,
     5819, 5825, 5830, 5841, 5846, 5854, 5866, 5874, 5887, 5896,
     5903, 5908, 5913, 5918, 5923, 5938, 5943, 5959, 5964,  211,
     5972,    0, 5988, 5993, 5998, 6008, 6021, 6026, 6031,  235,
      232,  226, 6036,  193, 6045, 6050,  227,  225,  213, 6060,
     6072, 6082, 6087, 6092, 6097, 6102, 6109, 6114, 6122, 6127,
     6132, 6137, 6150, 6156, 6161, 6174, 6179, 6184, 6189, 6194,
     6202,  183, 6208, 6213, 6226, 6235, 6244, 6255, 6264, 6273,
      221,  220,  206, 6286,  174, 6291,  189,  190,  192, 6296,

     6304, 6309, 6314, 6320, 6325, 6333, 6338, 6343, 6348, 6363,
     6371, 6378,  162, 6388, 6402, 6407, 6412, 6418, 6424, 6429,
     6434,  168,  167,  184, 6442,  153, 6447,  167,  175,  148,
     6452, 6473, 6478, 6487, 6493, 6498, 6503, 6508, 6513,  136,
     6518, 6523, 6528, 6533, 6541, 6546, 6554,  166,  165,  160,
     6564,  121, 6569,  132,  141,  117, 6574, 6581, 6591,   96,
     6603, 6621, 6626, 6631, 6636,  127,  126,   93, 6641,   61,
     6646,   88,   96,   69, 6652, 6657,    0, 6662, 6674, 6679,
     6801, 6801,   87, 6684,   51, 6698,   85, 6801,   72, 6703,
     6708, 6718,   83, 6728,    0, 6736, 6801,   80, 6741, 6746,

     6801,    0, 6801, 6801, 6776, 6781, 6783, 6788,   88, 6790,
     6795
    } ;

static yyconst flex_int16_t yy_def[1012] =
    {   0,
     1004,    1, 1004, 1004, 1004, 1004, 1004, 1005, 1006, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1007, 1007, 1007,
     1007, 1007, 1007, 1007,   20, 1007,   20, 1007,   20,   20,
       20,   20, 1007, 1007, 1004, 1004, 1007, 1007,   20, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007,   20, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1004, 1004, 1004, 1005, 1004,
     1008, 1006, 1006, 1004, 1004, 1004, 1004, 1004, 1004, 1009,
     1010, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1011, 1006, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1009, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1011, 1006, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1004, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1006, 1004, 1004, 1004, 1004,

     1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1004, 1004, 1004, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1006, 1004, 1004, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1010, 1007, 1007, 1007, 1004, 1004, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007, 1007,
     1010, 1007, 1007, 1007, 1004, 1004, 1004, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,

     1004, 1004, 1004, 1007, 1007, 1007, 1007, 1010, 1007, 1007,
     1004, 1004, 1004, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006,
     1007, 1010, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1004,
     1004, 1004, 1007, 1010, 1007, 1007, 1004, 1004, 1004, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1004, 1004, 1004, 1007, 1010, 1007, 1004, 1004, 1004, 1007,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1004, 1004, 1004, 1007, 1010, 1007, 1004, 1004, 1004,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1004, 1004, 1004,
     1007, 1010, 1007, 1004, 1004, 1004, 1007, 1007, 1007, 1006,
     1007, 1007, 1007, 1007, 1007, 1004, 1004, 1004, 1007, 1010,
     1007, 1004, 1004, 1004, 1007, 1007, 1006, 1007, 1007, 1007,
     1004, 1004, 1004, 1007, 1010, 1007, 1004, 1004, 1004, 1007,
     1007, 1007, 1004, 1007, 1010, 1007, 1004, 1004, 1007, 1007,

     1004, 1010, 1004,    0, 1004, 1004, 1004, 1004, 1004, 1004,
     1004
    } ;

static yyconst flex_int16_t yy_nxt[6875] =
    {   0,
        4,    5,    6,    4,    7,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   17,   17,   18,   19,
       20,   21,   22,   23,   22,   22,   24,   22,   22,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   22,   34,
       22,   22,   35,    4,   36,    4,   37,   38,   39,   40,
       41,   42,   22,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   22,   54,   55,   22,   22,   22,
       56,   57,   58,   60,   64,   65,   65,   65,   65,   65,
       66,   66,   66,   66,   66,   67,   68,   68,   68,   68,
       68,  174,   60,   60,   60,   69,   67,   68,   68,   68,

       68,   68, 1003,  755, 1001,  998,   69,  997,  995,  993,
      989,   61,  756,   70,   67,   68,   68,   68,   68,   68,
      988,  987,  985,   69,   69,   71,   71,   71,   71,   71,
       61,   61,   61,  983,   69,   71,   71,   71,   71,   71,
       70,   73,   71,   71,   71,   71,   71,  982,  981,   74,
      977,   83,   69,  974,   76,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   85,   71,   71,   71,   71,
       71,  424,  973,  972,   75,   71,   71,   71,   71,   71,
      970,  425,  968,   84,   77,   89,  426,  967,  966,   87,
      960,   78,   72,  956,   79,   90,   71,   71,   71,   71,

       71,  955,   72,  954,  952,  950,   86,  949,  948,   72,
      940,   88,   92,   98,  930,   71,   71,   71,   71,   71,
       72,   80,   72,   99,  929,   94,   81,   72,  102,   91,
       82,   72,  103,   95,  928,   72,  926,  924,   72,   93,
       96,  100,  923,  922,   72,  913,  899,  898,   72,  897,
      101,  895,  893,  892,   72,   72,  891,  882,  859,   72,
      858,   72,   72,   97,  114,  104,  115,  857,  854,   72,
       72,  852,   72,  116,   72,  105,  851,  850,  840,  106,
      813,  812,  117,  107,  811,   72,   72,  808,  803,  108,
      125,   72,   72,  118,  802,   72,   72,  801,  791,  126,

       72,  127,  757,  751,  128,  109,  744,  110,   72,  142,
      111,   71,   71,   71,   71,   71,   72,  112,  743,  742,
      729,   72,  143,  113,  675,   72,  674,  144,  673,  119,
      659,   72,  605,  120,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,  604,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      121,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  603,  588,  123,  525,
      524,  523,  502,  122,  396,  282,  165,  129,   63, 1004,
      124,  130, 1004, 1004,  133, 1004, 1004, 1004,  131,  132,

     1004, 1004,  134,  136, 1004, 1004, 1004,  135,   71,   71,
       71,   71,   71, 1004, 1004,  137,  138,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,  141, 1004, 1004, 1004,  139,
     1004, 1004, 1004,  140, 1004,  147, 1004, 1004, 1004, 1004,
      149, 1004,  145, 1004,  150,  146, 1004, 1004,  148,  152,
     1004, 1004, 1004,  151,  153,  154,  157, 1004, 1004, 1004,
     1004,  155, 1004, 1004,  156, 1004, 1004,  158,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,  166,  166,
      166,  166,  166, 1004,  167,   65,   65,   65,   65,   65,
     1004, 1004, 1004, 1004,  168,   66,   66,   66,   66,   66,
     1004,  159, 1004, 1004,  169,  160,  170,  170,  170,  170,
      170, 1004, 1004,  161,  162,  171,   71,   71,   71,   71,
       71,  163,  168,   67,   68,   68,   68,   68,   68, 1004,
     1004, 1004,  169,   69,  172, 1004,  172, 1004,  173,  173,
      173,  173,  173,  171,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
      175,   69,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,  176,   71,   71,   71,   71,   71,  178,   71,
       71,   71,   71,   71,  181,  179, 1004, 1004, 1004,  177,
     1004,  180,   71,   71,   71,   71,   71, 1004,  182,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
      183, 1004,  185,  186, 1004, 1004,  184,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,  189,   71,   71,
       71,   71,   71,  187,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  191, 1004, 1004,  188,   71,   71,
       71,   71,   71,  193,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  195, 1004, 1004,  196, 1004, 1004,

      190, 1004, 1004, 1004, 1004,  194, 1004, 1004, 1004,  192,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004, 1004,  198, 1004,  200,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      201,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      197,   71,   71,   71,   71,   71, 1004, 1004,  199, 1004,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004,  203,  204,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,

     1004,  202, 1004, 1004, 1004,  208, 1004, 1004, 1004,  207,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004, 1004,  205, 1004,  206,   71,   71,   71,   71,
       71, 1004, 1004,  210,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  212, 1004, 1004, 1004, 1004,  211,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
      209, 1004, 1004, 1004,  213,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,   71,   71,   71,   71,   71,  214,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71, 1004,  216, 1004, 1004, 1004,  220, 1004, 1004,
     1004, 1004,  215, 1004, 1004,  217,  221,  222, 1004, 1004,
     1004,  218,  219,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004, 1004,  226,  225,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004,  224,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  227, 1004,  223,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  228, 1004,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71, 1004, 1004, 1004,  229, 1004,
       71,   71,   71,   71,   71, 1004, 1004,  230,   71,   71,
       71,   71,   71,  231, 1004, 1004,  232,  234, 1004,  233,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  235, 1004,  236,  238,  237,
       71,   71,   71,   71,   71, 1004, 1004, 1004,  239,   71,
       71,   71,   71,   71,  240,   71,   71,   71,   71,   71,
      242,  241,   71,   71,   71,   71,   71, 1004, 1004,  243,
     1004, 1004, 1004,  244, 1004,  245,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  247, 1004,

      246,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  248, 1004, 1004, 1004,  250,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  249,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  251, 1004,
      253,  252,   71,   71,   71,   71,   71, 1004, 1004,  254,
      255,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  256, 1004,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,  257,
     1004, 1004, 1004,  258, 1004, 1004, 1004,  260, 1004, 1004,

     1004,  259, 1004, 1004, 1004, 1004,  261, 1004, 1004, 1004,
     1004,  262,  264, 1004, 1004, 1004, 1004,  265, 1004, 1004,
     1004,  263, 1004, 1004, 1004,  266,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,   71,   71,   71,
       71,   71, 1004, 1004,  268, 1004, 1004, 1004,  269,  270,
       71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,  274,
     1004, 1004,  267, 1004,  271,   71,   71,   71,   71,   71,
     1004,  272,  276, 1004,  275,  273,   71,   71,   71,   71,

       71, 1004, 1004, 1004, 1004,  277,  166,  166,  166,  166,
      166,  278, 1004, 1004, 1004,  283,  284,  284,  284,  284,
      284,  279, 1004, 1004, 1004,  285,  286, 1004,  286,  280,
      287,  287,  287,  287,  287,  173,  173,  173,  173,  173,
      288, 1004,  288,  283,  289,  289,  289,  289,  289, 1004,
     1004, 1004, 1004,  285,  170,  170,  170,  170,  170, 1004,
      291, 1004,  291,  290,  292,  292,  292,  292,  292,  173,
      173,  173,  173,  173,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004,  290,   71,   71,   71,   71,   71, 1004,  293, 1004,

      295,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004,  299,  296,  294, 1004, 1004,  298,  297,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004, 1004,  301, 1004,  300, 1004,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  306, 1004, 1004, 1004, 1004,  302,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,  303,  304,   71,   71,   71,   71,   71,

     1004, 1004, 1004,  305, 1004,  308,   71,   71,   71,   71,
       71,  310, 1004, 1004, 1004,  307,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  309,  312,
      315, 1004, 1004,  311,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004, 1004, 1004,  313,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  314,  317,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  316,   71,
       71,   71,   71,   71,  320, 1004,   71,   71,   71,   71,

       71,  319, 1004, 1004,  318,  323,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  324,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
      321, 1004, 1004, 1004,  322, 1004, 1004,  327, 1004, 1004,
     1004,  326, 1004, 1004,  325,   71,   71,   71,   71,   71,
     1004, 1004, 1004, 1004,  328,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004, 1004,  329,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,

     1004, 1004,  331,  330,   71,   71,   71,   71,   71, 1004,
     1004, 1004, 1004,  336, 1004, 1004,  333, 1004, 1004, 1004,
     1004,  332,   71,   71,   71,   71,   71, 1004, 1004, 1004,
     1004,  337, 1004, 1004,  334, 1004, 1004, 1004, 1004,  335,
       71,   71,   71,   71,   71, 1004,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  341, 1004, 1004,  340,
     1004, 1004, 1004, 1004,  342,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      338,  339,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  343,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,  344,  345,  350, 1004, 1004, 1004,
      349, 1004,  346,  347,   71,   71,   71,   71,   71, 1004,
      348,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  352,   71,   71,   71,   71,   71, 1004, 1004,
     1004, 1004,  351,   71,   71,   71,   71,   71, 1004, 1004,
     1004, 1004,  353,   71,   71,   71,   71,   71,  354,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,

     1004, 1004, 1004,  355,   71,   71,   71,   71,   71, 1004,
      357, 1004,  356,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004,  358, 1004,  359,  360,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,  361,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  362, 1004, 1004,  363,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  365,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004,  364, 1004,
     1004,  366,   71,   71,   71,   71,   71,  370, 1004, 1004,
     1004, 1004,  367,  368,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71, 1004,  369, 1004, 1004, 1004,  371,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004,  372,   71,   71,   71,   71,   71, 1004,  373,
      374,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  375, 1004, 1004,  376, 1004,  377, 1004,  378,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004,  379,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004,  380, 1004,
     1004,  381, 1004, 1004, 1004, 1004,  382, 1004, 1004,  383,

     1004, 1004, 1004, 1004,  384,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004,   71,   71,   71,   71,
       71, 1004, 1004,  386, 1004,  385,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  387,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
      388,  389,  397, 1004,  397, 1004,  398,  398,  398,  398,
      398,  284,  284,  284,  284,  284,  393,  390, 1004, 1004,
      399,  391, 1004,  400, 1004,  400,  392,  401,  401,  401,
      401,  401,  287,  287,  287,  287,  287, 1004, 1004,  394,

     1004,  395,  287,  287,  287,  287,  287, 1004,  399,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  402,
     1004,  402, 1004,  403,  403,  403,  403,  403,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004, 1004,  406, 1004, 1004,
     1004, 1004,  405,   71,   71,   71,   71,   71, 1004,   71,
       71,   71,   71,   71,  404, 1004,   71,   71,   71,   71,
       71, 1004, 1004,  407,  408,  409,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004,  410,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  411, 1004, 1004,  415, 1004, 1004, 1004,  413,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  412,  414, 1004,  417, 1004,
     1004, 1004,  416,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,  422,   71,   71,   71,   71,   71,
     1004, 1004, 1004, 1004,  418,   71,   71,   71,   71,   71,
     1004, 1004, 1004, 1004,  420, 1004,  419,  421,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  427,   71,
       71,   71,   71,   71,  430,   71,   71,   71,   71,   71,
     1004,  423,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004,  431, 1004,
     1004, 1004,  433, 1004, 1004,  428,   71,   71,   71,   71,
       71, 1004, 1004,  429,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  435,   71,   71,   71,   71,   71,  434, 1004,

     1004, 1004,  432,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
      436, 1004, 1004, 1004,  440,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  438,   71,   71,   71,   71,
       71,  437,   71,   71,   71,   71,   71, 1004,  441, 1004,
     1004,  439, 1004, 1004, 1004, 1004,  442,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  445,   71,   71,   71,
       71,   71, 1004,  446, 1004, 1004, 1004,  443, 1004, 1004,

     1004,  444, 1004,   71,   71,   71,   71,   71, 1004, 1004,
      450,   71,   71,   71,   71,   71, 1004,  447, 1004, 1004,
     1004, 1004,  448, 1004,  449,  451,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  452,   71,   71,
       71,   71,   71,  453,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  455,   71,   71,   71,   71,   71, 1004,  454,
     1004, 1004, 1004, 1004,  457,   71,   71,   71,   71,   71,
      456,  458,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71, 1004, 1004,  462, 1004,  459, 1004,  461,   71,
       71,   71,   71,   71, 1004,  460, 1004, 1004, 1004, 1004,
      464,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  463,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  465,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  466, 1004, 1004,  467,
     1004,  468, 1004,  469,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004, 1004,  470,  471,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,

     1004, 1004, 1004,  472, 1004, 1004,  473,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  474,   71,   71,   71,   71,
       71, 1004,  475,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
      476, 1004,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  477,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004,  478,   71,   71,   71,   71,
       71, 1004, 1004,  479, 1004, 1004, 1004, 1004,  480,  482,
     1004, 1004, 1004, 1004,  481,   71,   71,   71,   71,   71,
      483, 1004, 1004, 1004, 1004,  485, 1004,  484,   71,   71,

       71,   71,   71,  486,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
       71,   71,   71,   71,   71, 1004,  487, 1004, 1004,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,  488,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      489, 1004, 1004, 1004,  490,  491,  492,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004,  495, 1004,  493, 1004, 1004,  494, 1004,
     1004,   71,   71,   71,   71,   71, 1004,  496,  398,  398,

      398,  398,  398, 1004,  497,  398,  398,  398,  398,  398,
     1004, 1004,  498,  500,  501, 1004,  503,  499,  503, 1004,
      504,  504,  504,  504,  504,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004,  506,  505,   71,
       71,   71,   71,   71, 1004, 1004,  507,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004, 1004, 1004,
     1004,  510, 1004, 1004, 1004,  508,   71,   71,   71,   71,

       71, 1004, 1004, 1004,  509,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004,  513,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,  511, 1004,  516,
     1004,  512,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  514,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  515, 1004,  517,
     1004, 1004,  521,   71,   71,   71,   71,   71,  518,   71,
       71,   71,   71,   71, 1004,   71,   71,   71,   71,   71,

      520,   71,   71,   71,   71,   71,  519, 1004, 1004, 1004,
      522,  527,   71,   71,   71,   71,   71,  528,   71,   71,
       71,   71,   71, 1004,  529, 1004,  526,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004, 1004,  530,
     1004, 1004, 1004, 1004,  532,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      531, 1004,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004,   71,   71,   71,   71,   71, 1004, 1004,

     1004, 1004,  533,  536,   71,   71,   71,   71,   71, 1004,
     1004,  534, 1004, 1004, 1004,  535, 1004, 1004,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
      540,  538, 1004, 1004, 1004,  537,  539,  541,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  542,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004,  543, 1004, 1004, 1004,  545, 1004,  549,  544,   71,
       71,   71,   71,   71,  546,   71,   71,   71,   71,   71,

     1004, 1004, 1004,  547,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  548,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  550,   71,   71,   71,
       71,   71, 1004,  551,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  552,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004,  553,  560, 1004,
     1004, 1004,  555, 1004, 1004, 1004, 1004,  554, 1004, 1004,
      556,   71,   71,   71,   71,   71, 1004, 1004,  559,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,  557,

     1004, 1004, 1004, 1004,  558, 1004,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  561,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004,  562,  563,   71,   71,   71,   71,   71,
     1004, 1004,  564, 1004, 1004, 1004, 1004,  565,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004,  567,
     1004, 1004, 1004,  568, 1004,  566,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  569,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71, 1004,  570, 1004, 1004, 1004,  574,   71,
       71,   71,   71,   71, 1004, 1004, 1004,  575,   71,   71,
       71,   71,   71, 1004, 1004,  571,   71,   71,   71,   71,
       71, 1004,  576, 1004,  573, 1004,  572,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  580,   71,   71,   71,   71,
       71, 1004, 1004,  577,   71,   71,   71,   71,   71, 1004,
     1004,  578,   71,   71,   71,   71,   71, 1004, 1004, 1004,
      579,   71,   71,   71,   71,   71,  581,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71, 1004, 1004,  587,   71,   71,   71,   71,   71,
     1004, 1004,  582, 1004, 1004,  583, 1004, 1004, 1004,  584,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      504,  504,  504,  504,  504,  585,  504,  504,  504,  504,
      504,   71,   71,   71,   71,   71,  586,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004, 1004, 1004,
      590,   71,   71,   71,   71,   71, 1004, 1004,  589,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  591,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  594, 1004, 1004, 1004,
     1004,  593, 1004, 1004,  592,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,  595,
     1004,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  600,   71,   71,   71,   71,   71,  596, 1004,
     1004,  597, 1004,  598,  599, 1004, 1004, 1004, 1004,  601,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      606,   71,   71,   71,   71,   71, 1004, 1004,  602, 1004,
     1004,  607,  608,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004,   71,   71,   71,   71,   71, 1004,
     1004,  609, 1004, 1004, 1004, 1004,  611,  613, 1004, 1004,
      610,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  612,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  617, 1004,  614, 1004,
     1004,  618, 1004, 1004, 1004, 1004,  616,   71,   71,   71,

       71,   71,  615,   71,   71,   71,   71,   71, 1004,   71,
       71,   71,   71,   71, 1004, 1004, 1004, 1004,  619,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004, 1004, 1004,  620,   71,
       71,   71,   71,   71, 1004,  624,   71,   71,   71,   71,
       71,  626, 1004,  621,  622,   71,   71,   71,   71,   71,
      627,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004, 1004,  623,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  625,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004,   71,   71,   71,   71,

       71, 1004, 1004,  629, 1004, 1004, 1004, 1004,  628,   71,
       71,   71,   71,   71, 1004, 1004, 1004,  630,   71,   71,
       71,   71,   71,  631,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  636,   71,   71,   71,   71,   71,
     1004, 1004,  632,  633,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  634, 1004, 1004,  635,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  637,   71,   71,   71,
       71,   71, 1004, 1004,  641,  638, 1004,  640,   71,   71,
       71,   71,   71, 1004, 1004,  639,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004,  645,   71,   71,   71,   71,   71, 1004,
     1004,  643,  642,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
     1004, 1004,  644,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  647, 1004, 1004, 1004,
      646,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  648, 1004, 1004, 1004,
      650,   71,   71,   71,   71,   71, 1004,  651,  649,   71,
       71,   71,   71,   71,  652,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,  653,   71,   71,   71,   71,   71, 1004,  654, 1004,
     1004, 1004,  655, 1004,  657, 1004, 1004, 1004,  656,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004,  662,   71,   71,   71,
       71,   71,  658, 1004, 1004, 1004,  661,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004, 1004, 1004,
      663, 1004, 1004,  660,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  667,   71,   71,   71,   71,   71,

      668, 1004, 1004, 1004, 1004,  664,   71,   71,   71,   71,
       71, 1004, 1004,  665, 1004,  666,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  669,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,  670, 1004, 1004, 1004,  671,   71,   71,
       71,   71,   71, 1004,  672,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004,   71,   71,   71,   71,
       71, 1004,  677, 1004, 1004, 1004,  676,   71,   71,   71,
       71,   71,   71,   71,  684,   71,   71, 1004,  678,  685,
     1004, 1004, 1004,  679,   71,   71,   71,   71,   71, 1004,

      683,  680, 1004, 1004, 1004,  681,  682,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004, 1004,  692,
     1004, 1004,  686, 1004,  688, 1004, 1004, 1004, 1004,  689,
       71,   71,   71,   71,   71, 1004, 1004,  687,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  690, 1004,
     1004, 1004,  691,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004,  694,  695, 1004, 1004, 1004,

      693,   71,   71,   71,   71,   71, 1004, 1004,  700,  696,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004, 1004,  697, 1004, 1004, 1004, 1004,  698,   71,
       71,   71,   71,   71, 1004, 1004,  702, 1004,  699,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004,  701,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  703,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  704, 1004, 1004, 1004,
     1004,  705, 1004,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  706, 1004,

     1004, 1004,  707,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004, 1004,  708,  709,   71,
       71,   71,   71,   71, 1004,   71,   71,   71,   71,   71,
     1004, 1004, 1004,  710, 1004, 1004,  711,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004,  712,   71,
       71,   71,   71,   71, 1004, 1004, 1004, 1004,  713,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,  714,
      715,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  718, 1004, 1004,  717,  716,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,

      719,   71,   71,   71,   71,   71, 1004, 1004,  724, 1004,
     1004,  720,   71,   71,   71,   71,   71, 1004, 1004, 1004,
      721,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      723,   71,   71,   71,   71,   71, 1004,  722, 1004,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004, 1004, 1004,  731, 1004,
     1004, 1004,  725,   71,   71,   71,   71,   71, 1004,  726,
       71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,  727,
      728,   71,   71,   71,   71,   71,  732,   71,   71,   71,
       71,   71, 1004, 1004,  730, 1004,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004,  733,   71,   71,   71,   71,   71, 1004,
      738,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  734,  735,  736,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004,  737,   71,   71,
       71,   71,   71, 1004,  739,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,  740,   71,   71,   71,   71,   71, 1004, 1004, 1004,
     1004,  745,  741,   71,   71,   71,   71,   71,  746,   71,
       71,   71,   71,   71, 1004, 1004, 1004, 1004,  750,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004, 1004, 1004,  747,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  748,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,  749,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,  752, 1004, 1004,  753,   71,
       71,   71,   71,   71, 1004,  754,   71,   71,   71,   71,
       71, 1004, 1004, 1004, 1004,  759,   71,   71,   71,   71,
       71,  758, 1004, 1004, 1004, 1004,  761, 1004, 1004, 1004,
      760,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  762,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,  763,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
      764,  770, 1004, 1004, 1004,  765,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  766,   71,   71,   71,   71,   71,
     1004, 1004,  769, 1004,  767, 1004, 1004, 1004, 1004,  768,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004, 1004,  775,   71,
       71,   71,   71,   71,  772, 1004, 1004, 1004,  774, 1004,

      771,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004, 1004,  773,  776,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71, 1004,  777, 1004,
     1004, 1004,  778,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004,   71,   71,   71,   71,   71, 1004,
      779,  784,   71,   71,   71,   71,   71, 1004, 1004,  781,
       71,   71,   71,   71,   71, 1004, 1004,  780, 1004, 1004,
      782,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  783, 1004,  785,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004,  786,   71,   71,   71,
       71,   71,  787,  788, 1004, 1004, 1004,  789,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  792,   71,   71,   71,
       71,   71, 1004,  790,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,  793, 1004, 1004, 1004, 1004,
      794,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  795,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,  796,

      797,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  799, 1004, 1004, 1004,  798,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  800,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  804,   71,   71,   71,   71,   71, 1004, 1004,
     1004,  805,  807,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  806,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  809,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004,  810,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  814,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  816,  815,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  818,   71,   71,   71,
       71,   71,  817,  819,   71,   71,   71,   71,   71, 1004,
     1004,  820, 1004,  821,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,   71,   71,   71,   71,   71,
      824,   71,   71,   71,   71,   71,  822,  823,   71,   71,
       71,   71,   71, 1004, 1004, 1004, 1004,  825,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,  828,  826,
      827,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  829, 1004,  830,   71,   71,   71,
       71,   71, 1004, 1004,  831, 1004, 1004, 1004,  832,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004, 1004,  833,   71,   71,
       71,   71,   71, 1004,   71,   71,   71,   71,   71, 1004,
      834,  841, 1004,  835,   71,   71,   71,  842,   71,   71,
       71,   71,   71,   71, 1004,  836,  838, 1004, 1004,  837,

     1004, 1004, 1004, 1004,  839,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004,  843,   71,   71,   71,   71,   71, 1004, 1004,
     1004, 1004,  844, 1004, 1004, 1004, 1004,  845,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
      846,   71,   71,   71,   71,   71,  848, 1004, 1004,  847,
     1004, 1004, 1004, 1004,  849,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  853,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004,  855, 1004,
     1004,  856,   71,   71,   71,   71,   71,  860,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,  862, 1004,
     1004, 1004,  861,  863,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004,  864,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  866, 1004, 1004,  865,   71,
       71,   71,   71,   71, 1004, 1004,  867,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  869, 1004, 1004,  868,

       71,   71,   71,   71,   71, 1004, 1004, 1004,  870,   71,
       71,   71,   71,   71, 1004,  871,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  872, 1004, 1004, 1004,  873, 1004, 1004, 1004, 1004,
      874,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004, 1004,  875, 1004, 1004, 1004, 1004,  877,
     1004,  876,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,  878,   71,   71,   71,   71,   71,
     1004,  880, 1004, 1004, 1004, 1004,  879, 1004, 1004, 1004,

      883,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004,  884, 1004, 1004,
      881,   71,   71,   71,   71,   71, 1004, 1004,  885, 1004,
     1004, 1004, 1004,  886,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004, 1004,  894,  887,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71, 1004, 1004,
     1004, 1004,  888,   71,   71,   71,   71,   71, 1004,  890,
     1004, 1004, 1004, 1004,  889,   71,   71,   71,   71,   71,
     1004, 1004, 1004, 1004,  896,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,  900,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,  901,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71, 1004, 1004, 1004,  902, 1004,
     1004, 1004,  904,   71,   71,   71,   71,   71,  903,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71, 1004,
     1004, 1004,  906, 1004, 1004, 1004,  905,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,  907,   71,   71,   71,   71,   71,
      908,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004, 1004,  910, 1004, 1004, 1004, 1004,  909,   71,
       71,   71,   71,   71, 1004, 1004, 1004,  914,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  912,   71,   71,   71,
       71,   71,  911, 1004, 1004, 1004, 1004,  915,   71,   71,
       71,   71,   71, 1004, 1004, 1004,  916,   71,   71,   71,
       71,   71, 1004, 1004, 1004,  917,   71,   71,   71,   71,
       71, 1004, 1004,  921, 1004, 1004, 1004, 1004,  918,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,  919, 1004,  920,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  925,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71, 1004, 1004,  927,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      932, 1004, 1004, 1004, 1004,  931,   71,   71,   71,   71,
       71, 1004, 1004,  933,   71,   71,   71,   71,   71,  938,
      935,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,

      934,   71,   71,   71,   71,   71,  936, 1004, 1004,  937,
     1004, 1004, 1004, 1004,  941,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004,   71,   71,   71,   71,   71,  939,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004, 1004,  942,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      943, 1004, 1004, 1004, 1004,  944,  945, 1004, 1004, 1004,
      947, 1004, 1004, 1004, 1004,  946,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004,  951,

       71,   71,   71,   71,   71,  953,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71, 1004,  957,  961,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,  959,  958,   71,   71,   71,
       71,   71, 1004, 1004, 1004, 1004,  962,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71, 1004,  963,   71,   71,   71,   71,   71, 1004,

     1004, 1004, 1004,  964,   71,   71,   71,   71,   71, 1004,
     1004,  965, 1004, 1004,  969,  971,   71,   71,   71,   71,
       71, 1004, 1004, 1004, 1004,  978, 1004, 1004, 1004, 1004,
      976, 1004, 1004,  975,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1004,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
     1004, 1004, 1004, 1004,  979, 1004,  980,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,  984, 1004, 1004, 1004, 1004,  991, 1004,  986,
      990,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      994,   71,   71,   71,   71,   71, 1004, 1004, 1004, 1004,
      992,   71,   71,   71,   71,   71, 1004, 1004,  996,   71,
       71, 1002,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71, 1000, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004,  999,   59, 1004, 1004,   59,
       59,   62, 1004,   62,   62,   62,   72,   72,  164, 1004,
      164,  164,  164,   71,   71,  281, 1004, 1004,  281,  281,

        3, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004
    } ;

static yyconst flex_int16_t yy_chk[6875] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    8,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   15,   15,   15,   15,   15,
       15, 1009,   59,  164,  281,   15,   16,   16,   16,   16,

       16,   16,  998,  688,  993,  989,   16,  987,  985,  983,
      974,    8,  688,   15,   17,   17,   17,   17,   17,   17,
      973,  972,  970,   15,   17,   18,   18,   18,   18,   18,
       59,  164,  281,  968,   16,   19,   19,   19,   19,   19,
       15,   18,   21,   21,   21,   21,   21,  967,  966,   18,
      960,   21,   17,  956,   19,   22,   22,   22,   22,   22,
       23,   23,   23,   23,   23,   23,   24,   24,   24,   24,
       24,  319,  955,  954,   18,   20,   20,   20,   20,   20,
      952,  319,  950,   21,   20,   25,  319,  949,  948,   24,
      940,   20,   25,  930,   20,   25,   26,   26,   26,   26,

       26,  929,   27,  928,  926,  924,   23,  923,  922,   27,
      913,   24,   27,   29,  899,   28,   28,   28,   28,   28,
       29,   20,   25,   29,  898,   28,   20,   25,   30,   26,
       20,   25,   30,   28,  897,   30,  895,  893,   30,   27,
       28,   29,  892,  891,   27,  882,  859,  858,   27,  857,
       29,  854,  852,  851,   32,   29,  850,  840,  813,   29,
      812,   32,   39,   28,   32,   30,   32,  811,  808,   39,
       30,  803,   39,   32,   30,   31,  802,  801,  791,   31,
      757,  756,   32,   31,  755,   48,   31,  751,  744,   31,
       39,   32,   48,   32,  743,   48,   32,  742,  729,   39,

       32,   39,  689,  684,   39,   31,  675,   31,   39,   48,
       31,   33,   33,   33,   33,   33,   31,   31,  674,  673,
      659,   31,   48,   31,  605,   31,  604,   48,  603,   33,
      588,   48,  525,   33,   34,   34,   34,   34,   34,   37,
       37,   37,   37,   37,   38,   38,   38,   38,   38,  524,
       40,   40,   40,   40,   40,   41,   41,   41,   41,   41,
       34,   42,   42,   42,   42,   42,   43,   43,   43,   43,
       43,   44,   44,   44,   44,   44,  523,  502,   38,  426,
      425,  424,  396,   37,  282,  165,   63,   40,    9,    3,
       38,   40,    0,    0,   42,    0,    0,    0,   40,   41,

        0,    0,   42,   43,    0,    0,    0,   42,   45,   45,
       45,   45,   45,    0,    0,   44,   44,   46,   46,   46,
       46,   46,   47,   47,   47,   47,   47,   49,   49,   49,
       49,   49,   50,   50,   50,   50,   50,   51,   51,   51,
       51,   51,    0,    0,   52,   52,   52,   52,   52,   53,
       53,   53,   53,   53,    0,   47,    0,    0,    0,   45,
        0,    0,    0,   46,    0,   50,    0,    0,    0,    0,
       51,    0,   49,    0,   51,   49,    0,    0,   50,   52,
        0,    0,    0,   51,   52,   52,   53,    0,    0,    0,
        0,   52,    0,    0,   52,    0,    0,   53,   54,   54,

       54,   54,   54,   55,   55,   55,   55,   55,   64,   64,
       64,   64,   64,    0,   65,   65,   65,   65,   65,   65,
        0,    0,    0,    0,   65,   66,   66,   66,   66,   66,
        0,   54,    0,    0,   66,   54,   67,   67,   67,   67,
       67,    0,    0,   55,   55,   67,   72,   72,   72,   72,
       72,   55,   65,   68,   68,   68,   68,   68,   68,    0,
        0,    0,   66,   68,   69,    0,   69,    0,   69,   69,
       69,   69,   69,   67,   73,   73,   73,   73,   73,   74,
       74,   74,   74,   74,   75,   75,   75,   75,   75,    0,
       73,   68,   76,   76,   76,   76,   76,   80,   80,   80,

       80,   80,   74,   77,   77,   77,   77,   77,   76,   78,
       78,   78,   78,   78,   78,   76,    0,    0,    0,   75,
        0,   77,   79,   79,   79,   79,   79,    0,   78,   81,
       81,   81,   81,   81,   82,   82,   82,   82,   82,    0,
       79,    0,   80,   80,    0,    0,   79,   83,   83,   83,
       83,   83,   84,   84,   84,   84,   84,   83,   85,   85,
       85,   85,   85,   81,   86,   86,   86,   86,   86,   88,
       88,   88,   88,   88,   85,    0,    0,   82,   87,   87,
       87,   87,   87,   87,   89,   89,   89,   89,   89,   90,
       90,   90,   90,   90,   89,    0,    0,   90,    0,    0,

       84,    0,    0,    0,    0,   88,    0,    0,    0,   86,
       91,   91,   91,   91,   91,   92,   92,   92,   92,   92,
       93,   93,   93,   93,   93,   94,   94,   94,   94,   94,
        0,    0,    0,   92,    0,   94,   95,   95,   95,   95,
       95,   96,   96,   96,   96,   96,    0,    0,    0,    0,
       96,   97,   97,   97,   97,   97,    0,    0,    0,    0,
       91,   98,   98,   98,   98,   98,    0,    0,   93,    0,
       99,   99,   99,   99,   99,  100,  100,  100,  100,  100,
        0,    0,   98,   99,  101,  101,  101,  101,  101,  102,
      102,  102,  102,  102,  103,  103,  103,  103,  103,    0,

        0,   97,    0,    0,    0,  103,    0,    0,    0,  102,
      104,  104,  104,  104,  104,  105,  105,  105,  105,  105,
        0,    0,    0,  100,    0,  101,  106,  106,  106,  106,
      106,    0,    0,  105,  107,  107,  107,  107,  107,    0,
        0,    0,  107,    0,    0,    0,    0,  106,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  109,    0,    0,
      104,    0,    0,    0,  108,  110,  110,  110,  110,  110,
      111,  111,  111,  111,  111,  112,  112,  112,  112,  112,
        0,  113,  113,  113,  113,  113,  109,  114,  114,  114,
      114,  114,  115,  115,  115,  115,  115,  116,  116,  116,

      116,  116,    0,  111,    0,    0,    0,  114,    0,    0,
        0,    0,  110,    0,    0,  112,  115,  116,    0,    0,
        0,  112,  113,  117,  117,  117,  117,  117,  118,  118,
      118,  118,  118,  119,  119,  119,  119,  119,  120,  120,
      120,  120,  120,    0,    0,    0,    0,  120,  119,  121,
      121,  121,  121,  121,  122,  122,  122,  122,  122,    0,
        0,  118,  123,  123,  123,  123,  123,  124,  124,  124,
      124,  124,    0,    0,    0,  121,    0,  117,  125,  125,
      125,  125,  125,  126,  126,  126,  126,  126,  122,    0,
      127,  127,  127,  127,  127,  128,  128,  128,  128,  128,

      129,  129,  129,  129,  129,    0,    0,    0,  123,    0,
      130,  130,  130,  130,  130,    0,    0,  124,  131,  131,
      131,  131,  131,  125,    0,    0,  126,  127,    0,  126,
      132,  132,  132,  132,  132,  133,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  128,    0,  129,  130,  129,
      135,  135,  135,  135,  135,    0,    0,    0,  130,  136,
      136,  136,  136,  136,  131,  137,  137,  137,  137,  137,
      133,  132,  138,  138,  138,  138,  138,    0,    0,  133,
        0,    0,    0,  134,    0,  135,  139,  139,  139,  139,
      139,  140,  140,  140,  140,  140,    0,    0,  137,    0,

      136,  141,  141,  141,  141,  141,  142,  142,  142,  142,
      142,  143,  143,  143,  143,  143,  144,  144,  144,  144,
      144,    0,  138,    0,    0,    0,  140,  145,  145,  145,
      145,  145,    0,    0,    0,  139,  146,  146,  146,  146,
      146,  147,  147,  147,  147,  147,    0,    0,  141,    0,
      142,  141,  148,  148,  148,  148,  148,    0,    0,  143,
      144,  149,  149,  149,  149,  149,  150,  150,  150,  150,
      150,  151,  151,  151,  151,  151,    0,  146,    0,  152,
      152,  152,  152,  152,  153,  153,  153,  153,  153,  147,
        0,    0,    0,  148,    0,    0,    0,  149,    0,    0,

        0,  148,    0,    0,    0,    0,  149,    0,    0,    0,
        0,  150,  152,    0,    0,    0,    0,  153,    0,    0,
        0,  151,    0,    0,    0,  153,  154,  154,  154,  154,
      154,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  157,  157,  157,  157,  157,  158,  158,  158,  158,
      158,  159,  159,  159,  159,  159,    0,  160,  160,  160,
      160,  160,    0,    0,  155,    0,    0,    0,  155,  156,
      161,  161,  161,  161,  161,    0,    0,    0,    0,  158,
        0,    0,  154,    0,  156,  162,  162,  162,  162,  162,
        0,  156,  160,    0,  159,  157,  163,  163,  163,  163,

      163,    0,    0,    0,    0,  160,  166,  166,  166,  166,
      166,  161,    0,    0,    0,  166,  167,  167,  167,  167,
      167,  162,    0,    0,    0,  167,  168,    0,  168,  163,
      168,  168,  168,  168,  168,  172,  172,  172,  172,  172,
      169,    0,  169,  166,  169,  169,  169,  169,  169,    0,
        0,    0,    0,  167,  170,  170,  170,  170,  170,    0,
      171,    0,  171,  170,  171,  171,  171,  171,  171,  173,
      173,  173,  173,  173,  175,  175,  175,  175,  175,  176,
      176,  176,  176,  176,  177,  177,  177,  177,  177,    0,
        0,  170,  178,  178,  178,  178,  178,    0,  176,    0,

      178,  179,  179,  179,  179,  179,  180,  180,  180,  180,
      180,  181,  181,  181,  181,  181,  182,  182,  182,  182,
      182,    0,    0,  182,  179,  177,    0,    0,  181,  180,
      183,  183,  183,  183,  183,  184,  184,  184,  184,  184,
      185,  185,  185,  185,  185,  186,  186,  186,  186,  186,
        0,    0,    0,  184,    0,  183,    0,  187,  187,  187,
      187,  187,  188,  188,  188,  188,  188,  189,  189,  189,
      189,  189,  189,    0,    0,    0,    0,  185,  190,  190,
      190,  190,  190,  191,  191,  191,  191,  191,  192,  192,
      192,  192,  192,  186,  187,  193,  193,  193,  193,  193,

        0,    0,    0,  188,    0,  191,  194,  194,  194,  194,
      194,  193,    0,    0,    0,  190,  195,  195,  195,  195,
      195,  196,  196,  196,  196,  196,  197,  197,  197,  197,
      197,  198,  198,  198,  198,  198,    0,    0,  192,  195,
      198,    0,    0,  194,  199,  199,  199,  199,  199,  200,
      200,  200,  200,  200,  201,  201,  201,  201,  201,    0,
        0,    0,    0,  197,  202,  202,  202,  202,  202,  203,
      203,  203,  203,  203,  197,  201,  204,  204,  204,  204,
      204,  205,  205,  205,  205,  205,    0,    0,  199,  206,
      206,  206,  206,  206,  204,    0,  207,  207,  207,  207,

      207,  203,    0,    0,  202,  207,  208,  208,  208,  208,
      208,  209,  209,  209,  209,  209,    0,    0,  208,  210,
      210,  210,  210,  210,  211,  211,  211,  211,  211,    0,
      205,    0,    0,    0,  206,    0,    0,  211,    0,    0,
        0,  210,    0,    0,  209,  212,  212,  212,  212,  212,
        0,    0,    0,    0,  212,  213,  213,  213,  213,  213,
      214,  214,  214,  214,  214,    0,    0,    0,  213,  215,
      215,  215,  215,  215,  216,  216,  216,  216,  216,  217,
      217,  217,  217,  217,  218,  218,  218,  218,  218,  219,
      219,  219,  219,  219,  220,  220,  220,  220,  220,    0,

        0,    0,  215,  214,  221,  221,  221,  221,  221,    0,
        0,    0,    0,  221,    0,    0,  217,    0,    0,    0,
        0,  216,  222,  222,  222,  222,  222,    0,    0,    0,
        0,  222,    0,    0,  218,    0,    0,    0,    0,  219,
      223,  223,  223,  223,  223,    0,  224,  224,  224,  224,
      224,  225,  225,  225,  225,  225,  226,  226,  226,  226,
      226,  227,  227,  227,  227,  227,  227,    0,    0,  225,
        0,    0,    0,    0,  227,  228,  228,  228,  228,  228,
      229,  229,  229,  229,  229,  230,  230,  230,  230,  230,
      223,  224,  231,  231,  231,  231,  231,  232,  232,  232,

      232,  232,  233,  233,  233,  233,  233,  234,  234,  234,
      234,  234,    0,    0,    0,    0,  228,  235,  235,  235,
      235,  235,  236,  236,  236,  236,  236,  237,  237,  237,
      237,  237,    0,    0,  229,  230,  235,    0,    0,    0,
      234,    0,  231,  232,  238,  238,  238,  238,  238,    0,
      233,  239,  239,  239,  239,  239,  240,  240,  240,  240,
      240,    0,  237,  241,  241,  241,  241,  241,    0,    0,
        0,    0,  236,  242,  242,  242,  242,  242,    0,    0,
        0,    0,  238,  243,  243,  243,  243,  243,  239,  244,
      244,  244,  244,  244,  245,  245,  245,  245,  245,    0,

        0,    0,    0,  240,  246,  246,  246,  246,  246,    0,
      242,    0,  241,  247,  247,  247,  247,  247,  248,  248,
      248,  248,  248,    0,  243,    0,  244,  245,  249,  249,
      249,  249,  249,  250,  250,  250,  250,  250,  251,  251,
      251,  251,  251,  246,  252,  252,  252,  252,  252,    0,
        0,    0,  247,    0,    0,  248,  253,  253,  253,  253,
      253,  254,  254,  254,  254,  254,  250,  255,  255,  255,
      255,  255,  256,  256,  256,  256,  256,    0,  249,    0,
        0,  252,  257,  257,  257,  257,  257,  255,    0,    0,
        0,    0,  252,  253,  258,  258,  258,  258,  258,  259,

      259,  259,  259,  259,    0,  254,    0,    0,    0,  256,
      260,  260,  260,  260,  260,  261,  261,  261,  261,  261,
      262,  262,  262,  262,  262,  263,  263,  263,  263,  263,
        0,    0,  257,  264,  264,  264,  264,  264,    0,  258,
      259,  265,  265,  265,  265,  265,  266,  266,  266,  266,
      266,  260,    0,    0,  261,    0,  262,    0,  263,  267,
      267,  267,  267,  267,  268,  268,  268,  268,  268,  269,
      269,  269,  269,  269,    0,    0,  264,  270,  270,  270,
      270,  270,  271,  271,  271,  271,  271,    0,  265,    0,
        0,  266,    0,    0,    0,    0,  267,    0,    0,  268,

        0,    0,    0,    0,  269,  272,  272,  272,  272,  272,
      273,  273,  273,  273,  273,    0,  274,  274,  274,  274,
      274,    0,    0,  271,    0,  270,  275,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  277,  277,  277,  277,
      277,  278,  278,  278,  278,  278,    0,    0,  272,  279,
      279,  279,  279,  279,  280,  280,  280,  280,  280,    0,
      273,  274,  283,    0,  283,    0,  283,  283,  283,  283,
      283,  284,  284,  284,  284,  284,  278,  275,    0,    0,
      284,  276,    0,  285,    0,  285,  277,  285,  285,  285,
      285,  285,  286,  286,  286,  286,  286,    0,    0,  279,

        0,  280,  287,  287,  287,  287,  287,    0,  284,  288,
      288,  288,  288,  288,  289,  289,  289,  289,  289,  290,
        0,  290,    0,  290,  290,  290,  290,  290,  291,  291,
      291,  291,  291,  292,  292,  292,  292,  292,  293,  293,
      293,  293,  293,  294,  294,  294,  294,  294,  295,  295,
      295,  295,  295,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,    0,    0,    0,    0,  297,    0,    0,
        0,    0,  296,  298,  298,  298,  298,  298,    0,  299,
      299,  299,  299,  299,  294,    0,  300,  300,  300,  300,
      300,    0,    0,  298,  299,  300,  301,  301,  301,  301,

      301,  302,  302,  302,  302,  302,  303,  303,  303,  303,
      303,  304,  304,  304,  304,  304,    0,    0,    0,  301,
      305,  305,  305,  305,  305,  306,  306,  306,  306,  306,
        0,  307,  307,  307,  307,  307,  308,  308,  308,  308,
      308,    0,  303,    0,    0,  308,    0,    0,    0,  306,
      309,  309,  309,  309,  309,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  311,  305,  307,    0,  310,    0,
        0,    0,  309,  312,  312,  312,  312,  312,  313,  313,
      313,  313,  313,  314,  314,  314,  314,  314,  315,  315,
      315,  315,  315,    0,  316,  316,  316,  316,  316,  317,

      317,  317,  317,  317,  317,  318,  318,  318,  318,  318,
        0,    0,    0,    0,  311,  320,  320,  320,  320,  320,
        0,    0,    0,    0,  314,    0,  313,  316,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  320,  323,
      323,  323,  323,  323,  323,  324,  324,  324,  324,  324,
        0,  318,  325,  325,  325,  325,  325,  326,  326,  326,
      326,  326,  327,  327,  327,  327,  327,    0,  324,    0,
        0,    0,  327,    0,    0,  321,  328,  328,  328,  328,
      328,    0,    0,  322,  329,  329,  329,  329,  329,    0,
        0,    0,  329,  330,  330,  330,  330,  330,  328,    0,

        0,    0,  325,  331,  331,  331,  331,  331,  332,  332,
      332,  332,  332,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  335,  335,  335,  335,  335,    0,    0,
      330,    0,    0,    0,  334,  336,  336,  336,  336,  336,
      337,  337,  337,  337,  337,  332,  338,  338,  338,  338,
      338,  331,  339,  339,  339,  339,  339,    0,  335,    0,
        0,  333,    0,    0,    0,    0,  337,  340,  340,  340,
      340,  340,  341,  341,  341,  341,  341,  342,  342,  342,
      342,  342,    0,    0,    0,    0,  340,  343,  343,  343,
      343,  343,    0,  340,    0,    0,    0,  338,    0,    0,

        0,  339,    0,  344,  344,  344,  344,  344,    0,    0,
      344,  345,  345,  345,  345,  345,    0,  341,    0,    0,
        0,    0,  342,    0,  343,  344,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  350,  350,  350,  350,
      350,  351,  351,  351,  351,  351,    0,  345,  352,  352,
      352,  352,  352,  346,  353,  353,  353,  353,  353,    0,
        0,    0,  348,  354,  354,  354,  354,  354,    0,  347,
        0,    0,    0,    0,  350,  355,  355,  355,  355,  355,
      349,  351,  356,  356,  356,  356,  356,  357,  357,  357,

      357,  357,    0,    0,  355,    0,  352,    0,  354,  358,
      358,  358,  358,  358,    0,  353,    0,    0,    0,    0,
      357,  359,  359,  359,  359,  359,  360,  360,  360,  360,
      360,  361,  361,  361,  361,  361,  362,  362,  362,  362,
      362,  356,  363,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  358,  365,  365,  365,  365,  365,  366,  366,
      366,  366,  366,    0,    0,    0,  359,    0,    0,  360,
        0,  361,    0,  362,  367,  367,  367,  367,  367,  368,
      368,  368,  368,  368,    0,    0,    0,  363,  364,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,    0,

        0,    0,    0,  365,    0,    0,  366,  371,  371,  371,
      371,  371,    0,    0,    0,  367,  372,  372,  372,  372,
      372,    0,  369,  373,  373,  373,  373,  373,  374,  374,
      374,  374,  374,  375,  375,  375,  375,  375,    0,    0,
      370,    0,  376,  376,  376,  376,  376,  378,  378,  378,
      378,  378,  371,  377,  377,  377,  377,  377,  379,  379,
      379,  379,  379,    0,    0,  372,  380,  380,  380,  380,
      380,    0,    0,  373,    0,    0,    0,    0,  374,  376,
        0,    0,    0,    0,  375,  381,  381,  381,  381,  381,
      377,    0,    0,    0,    0,  379,    0,  378,  382,  382,

      382,  382,  382,  380,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  385,  385,  385,  385,  385,    0,
      386,  386,  386,  386,  386,    0,  381,    0,    0,  387,
      387,  387,  387,  387,  388,  388,  388,  388,  388,  389,
      389,  389,  389,  389,    0,  383,  390,  390,  390,  390,
      390,  391,  391,  391,  391,  391,    0,    0,    0,    0,
      384,    0,    0,    0,  385,  386,  387,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  394,  394,  394,
      394,  394,    0,  390,    0,  388,    0,    0,  389,    0,
        0,  395,  395,  395,  395,  395,    0,  391,  397,  397,

      397,  397,  397,    0,  392,  398,  398,  398,  398,  398,
        0,    0,  393,  395,  395,    0,  399,  394,  399,    0,
      399,  399,  399,  399,  399,  400,  400,  400,  400,  400,
      401,  401,  401,  401,  401,  402,  402,  402,  402,  402,
      403,  403,  403,  403,  403,  404,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      407,  407,  407,  407,  407,    0,    0,  405,  404,  408,
      408,  408,  408,  408,    0,    0,  406,  409,  409,  409,
      409,  409,  410,  410,  410,  410,  410,    0,    0,    0,
        0,  410,    0,    0,    0,  408,  411,  411,  411,  411,

      411,    0,    0,    0,  409,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  414,  414,  414,  414,  414,
      415,  415,  415,  415,  415,    0,  413,  416,  416,  416,
      416,  416,  417,  417,  417,  417,  417,  411,    0,  417,
        0,  412,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  420,  420,  420,  420,  420,  421,  421,  421,
      421,  421,    0,    0,    0,  414,  422,  422,  422,  422,
      422,  423,  423,  423,  423,  423,    0,  416,    0,  418,
        0,    0,  422,  427,  427,  427,  427,  427,  419,  428,
      428,  428,  428,  428,    0,  429,  429,  429,  429,  429,

      421,  430,  430,  430,  430,  430,  420,    0,    0,    0,
      423,  429,  431,  431,  431,  431,  431,  429,  432,  432,
      432,  432,  432,    0,  430,    0,  428,  433,  433,  433,
      433,  433,  434,  434,  434,  434,  434,  435,  435,  435,
      435,  435,  436,  436,  436,  436,  436,  437,  437,  437,
      437,  437,  438,  438,  438,  438,  438,    0,    0,  432,
        0,    0,    0,    0,  438,  439,  439,  439,  439,  439,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,
      437,    0,  442,  442,  442,  442,  442,  443,  443,  443,
      443,  443,    0,  444,  444,  444,  444,  444,    0,    0,

        0,    0,  439,  442,  445,  445,  445,  445,  445,    0,
        0,  440,    0,    0,    0,  441,    0,    0,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,    0,    0,
      445,  444,    0,    0,    0,  443,  444,  446,  448,  448,
      448,  448,  448,  449,  449,  449,  449,  449,  450,  450,
      450,  450,  450,  451,  451,  451,  451,  451,  447,  452,
      452,  452,  452,  452,  453,  453,  453,  453,  453,  454,
      454,  454,  454,  454,  455,  455,  455,  455,  455,    0,
        0,  448,    0,    0,    0,  450,    0,  455,  449,  456,
      456,  456,  456,  456,  451,  457,  457,  457,  457,  457,

        0,    0,    0,  452,  458,  458,  458,  458,  458,    0,
        0,    0,  453,  459,  459,  459,  459,  459,  460,  460,
      460,  460,  460,    0,    0,    0,  456,  461,  461,  461,
      461,  461,    0,  457,  462,  462,  462,  462,  462,  463,
      463,  463,  463,  463,  464,  464,  464,  464,  464,  465,
      465,  465,  465,  465,  459,  466,  466,  466,  466,  466,
      467,  467,  467,  467,  467,    0,    0,  460,  467,    0,
        0,    0,  462,    0,    0,    0,    0,  461,    0,    0,
      463,  468,  468,  468,  468,  468,    0,    0,  466,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  464,

        0,    0,    0,    0,  465,    0,  471,  471,  471,  471,
      471,  472,  472,  472,  472,  472,  473,  473,  473,  473,
      473,  474,  474,  474,  474,  474,  475,  475,  475,  475,
      475,  468,  476,  476,  476,  476,  476,  477,  477,  477,
      477,  477,    0,  470,  471,  478,  478,  478,  478,  478,
        0,    0,  472,    0,    0,    0,    0,  473,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,    0,  475,
        0,    0,    0,  476,    0,  474,  481,  481,  481,  481,
      481,  482,  482,  482,  482,  482,    0,  477,  483,  483,
      483,  483,  483,  484,  484,  484,  484,  484,  485,  485,

      485,  485,  485,    0,  480,    0,    0,    0,  485,  486,
      486,  486,  486,  486,    0,    0,    0,  485,  487,  487,
      487,  487,  487,    0,    0,  481,  488,  488,  488,  488,
      488,    0,  486,    0,  484,    0,  483,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  491,  491,  491,
      491,  491,    0,    0,    0,  490,  492,  492,  492,  492,
      492,    0,    0,  487,  493,  493,  493,  493,  493,    0,
        0,  488,  494,  494,  494,  494,  494,    0,    0,    0,
      489,  495,  495,  495,  495,  495,  491,  496,  496,  496,
      496,  496,  497,  497,  497,  497,  497,  498,  498,  498,

      498,  498,    0,    0,  498,  499,  499,  499,  499,  499,
        0,    0,  493,    0,    0,  494,    0,    0,    0,  494,
      500,  500,  500,  500,  500,  501,  501,  501,  501,  501,
      503,  503,  503,  503,  503,  496,  504,  504,  504,  504,
      504,  505,  505,  505,  505,  505,  497,  506,  506,  506,
      506,  506,  507,  507,  507,  507,  507,  508,  508,  508,
      508,  508,  509,  509,  509,  509,  509,    0,    0,    0,
      508,  510,  510,  510,  510,  510,    0,    0,  505,  511,
      511,  511,  511,  511,  512,  512,  512,  512,  512,    0,
        0,    0,  510,  513,  513,  513,  513,  513,  514,  514,

      514,  514,  514,  515,  515,  515,  515,  515,  516,  516,
      516,  516,  516,    0,    0,    0,  513,    0,    0,    0,
        0,  512,    0,    0,  511,  517,  517,  517,  517,  517,
      518,  518,  518,  518,  518,    0,    0,    0,    0,  514,
        0,  519,  519,  519,  519,  519,  520,  520,  520,  520,
      520,    0,  520,  521,  521,  521,  521,  521,  515,    0,
        0,  517,    0,  518,  519,    0,    0,    0,    0,  521,
      522,  522,  522,  522,  522,  526,  526,  526,  526,  526,
      527,  527,  527,  527,  527,  528,  528,  528,  528,  528,
      529,  529,  529,  529,  529,  530,  530,  530,  530,  530,

      531,  531,  531,  531,  531,  532,  532,  532,  532,  532,
      526,  533,  533,  533,  533,  533,    0,    0,  522,    0,
        0,  527,  528,  534,  534,  534,  534,  534,  535,  535,
      535,  535,  535,    0,  536,  536,  536,  536,  536,    0,
        0,  530,    0,    0,    0,    0,  532,  536,    0,    0,
      531,  537,  537,  537,  537,  537,  538,  538,  538,  538,
      538,    0,  534,  539,  539,  539,  539,  539,  540,  540,
      540,  540,  540,  541,  541,  541,  541,  541,  542,  542,
      542,  542,  542,    0,    0,    0,  540,    0,  537,    0,
        0,  541,    0,    0,    0,    0,  539,  543,  543,  543,

      543,  543,  538,  544,  544,  544,  544,  544,    0,  545,
      545,  545,  545,  545,    0,    0,    0,    0,  542,  546,
      546,  546,  546,  546,  547,  547,  547,  547,  547,  548,
      548,  548,  548,  548,    0,    0,    0,    0,  543,  549,
      549,  549,  549,  549,    0,  547,  550,  550,  550,  550,
      550,  550,    0,  544,  545,  551,  551,  551,  551,  551,
      551,  552,  552,  552,  552,  552,  553,  553,  553,  553,
      553,    0,    0,    0,    0,  546,  554,  554,  554,  554,
      554,    0,    0,    0,  549,  555,  555,  555,  555,  555,
      556,  556,  556,  556,  556,    0,  557,  557,  557,  557,

      557,    0,    0,  553,    0,    0,    0,    0,  552,  558,
      558,  558,  558,  558,    0,    0,    0,  554,  559,  559,
      559,  559,  559,  555,  560,  560,  560,  560,  560,  561,
      561,  561,  561,  561,  561,  562,  562,  562,  562,  562,
        0,    0,  556,  557,  563,  563,  563,  563,  563,  564,
      564,  564,  564,  564,  565,  565,  565,  565,  565,    0,
        0,    0,  559,    0,    0,  560,  566,  566,  566,  566,
      566,  567,  567,  567,  567,  567,  562,  568,  568,  568,
      568,  568,    0,    0,  567,  563,    0,  565,  569,  569,
      569,  569,  569,    0,    0,  564,  570,  570,  570,  570,

      570,  571,  571,  571,  571,  571,  572,  572,  572,  572,
      572,    0,    0,  572,  573,  573,  573,  573,  573,    0,
        0,  569,  568,  574,  574,  574,  574,  574,  575,  575,
      575,  575,  575,  576,  576,  576,  576,  576,    0,    0,
        0,    0,  570,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  578,    0,    0,    0,  574,    0,    0,    0,
      573,  579,  579,  579,  579,  579,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  575,    0,    0,    0,
      577,  582,  582,  582,  582,  582,    0,  578,  576,  583,
      583,  583,  583,  583,  579,  584,  584,  584,  584,  584,

      585,  585,  585,  585,  585,  586,  586,  586,  586,  586,
        0,  580,  587,  587,  587,  587,  587,    0,  582,    0,
        0,    0,  583,    0,  586,    0,    0,    0,  584,  589,
      589,  589,  589,  589,  590,  590,  590,  590,  590,  591,
      591,  591,  591,  591,    0,    0,  591,  592,  592,  592,
      592,  592,  587,    0,    0,    0,  590,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  595,  595,  595,
      595,  595,  596,  596,  596,  596,  596,    0,    0,    0,
      592,    0,    0,  589,  597,  597,  597,  597,  597,  598,
      598,  598,  598,  598,  597,  599,  599,  599,  599,  599,

      597,    0,    0,    0,    0,  593,  600,  600,  600,  600,
      600,    0,    0,  595,    0,  596,  601,  601,  601,  601,
      601,  602,  602,  602,  602,  602,  606,  606,  606,  606,
      606,    0,  598,  607,  607,  607,  607,  607,  608,  608,
      608,  608,  608,  599,    0,    0,    0,  600,  609,  609,
      609,  609,  609,    0,  602,  610,  610,  610,  610,  610,
      611,  611,  611,  611,  611,    0,  612,  612,  612,  612,
      612,    0,  607,    0,    0,    0,  606,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  614,    0,  608,  614,
        0,    0,    0,  609,  615,  615,  615,  615,  615,    0,

      613,  610,    0,    0,    0,  611,  612,  616,  616,  616,
      616,  616,  617,  617,  617,  617,  617,  618,  618,  618,
      618,  618,  619,  619,  619,  619,  619,  620,  620,  620,
      620,  620,  621,  621,  621,  621,  621,    0,    0,  621,
        0,    0,  615,    0,  617,    0,    0,    0,    0,  618,
      622,  622,  622,  622,  622,    0,    0,  616,  623,  623,
      623,  623,  623,  624,  624,  624,  624,  624,  619,    0,
        0,    0,  620,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  627,  627,  627,  627,  627,  628,  628,
      628,  628,  628,    0,    0,  623,  624,    0,    0,    0,

      622,  629,  629,  629,  629,  629,    0,    0,  629,  625,
      630,  630,  630,  630,  630,  631,  631,  631,  631,  631,
        0,    0,    0,  626,    0,    0,    0,    0,  627,  632,
      632,  632,  632,  632,    0,    0,  631,    0,  628,  633,
      633,  633,  633,  633,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,    0,    0,  630,  636,  636,  636,
      636,  636,    0,    0,    0,    0,  632,  637,  637,  637,
      637,  637,    0,    0,    0,    0,  633,    0,    0,    0,
        0,  634,    0,  638,  638,  638,  638,  638,  639,  639,
      639,  639,  639,  640,  640,  640,  640,  640,  635,    0,

        0,    0,  636,  641,  641,  641,  641,  641,  642,  642,
      642,  642,  642,    0,    0,    0,    0,  637,  638,  643,
      643,  643,  643,  643,    0,  644,  644,  644,  644,  644,
        0,    0,    0,  639,    0,    0,  640,  645,  645,  645,
      645,  645,  646,  646,  646,  646,  646,    0,  641,  647,
      647,  647,  647,  647,    0,    0,    0,    0,  642,  648,
      648,  648,  648,  648,  649,  649,  649,  649,  649,  643,
      644,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,    0,    0,    0,  647,    0,    0,  646,  645,  652,
      652,  652,  652,  652,  653,  653,  653,  653,  653,    0,

      648,  654,  654,  654,  654,  654,    0,    0,  654,    0,
        0,  649,  655,  655,  655,  655,  655,    0,    0,    0,
      650,  656,  656,  656,  656,  656,    0,    0,    0,    0,
      653,  657,  657,  657,  657,  657,    0,  652,    0,  658,
      658,  658,  658,  658,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,    0,    0,    0,    0,  661,    0,
        0,    0,  655,  663,  663,  663,  663,  663,    0,  656,
      662,  662,  662,  662,  662,    0,    0,    0,    0,  657,
      658,  664,  664,  664,  664,  664,  662,  665,  665,  665,
      665,  665,    0,    0,  660,    0,  666,  666,  666,  666,

      666,  667,  667,  667,  667,  667,  668,  668,  668,  668,
      668,    0,    0,  663,  669,  669,  669,  669,  669,    0,
      669,  670,  670,  670,  670,  670,  671,  671,  671,  671,
      671,    0,  665,  666,  667,  672,  672,  672,  672,  672,
      676,  676,  676,  676,  676,    0,    0,  668,  677,  677,
      677,  677,  677,    0,  670,  678,  678,  678,  678,  678,
      679,  679,  679,  679,  679,  680,  680,  680,  680,  680,
        0,  671,  681,  681,  681,  681,  681,    0,    0,    0,
        0,  676,  672,  682,  682,  682,  682,  682,  677,  683,
      683,  683,  683,  683,    0,    0,    0,    0,  683,  685,

      685,  685,  685,  685,  686,  686,  686,  686,  686,    0,
        0,    0,    0,  680,  687,  687,  687,  687,  687,    0,
        0,    0,  681,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  682,  692,  692,  692,  692,  692,  693,
      693,  693,  693,  693,    0,  685,    0,    0,  686,  694,
      694,  694,  694,  694,    0,  687,  695,  695,  695,  695,
      695,    0,    0,    0,    0,  691,  696,  696,  696,  696,
      696,  690,    0,    0,    0,    0,  693,    0,    0,    0,
      692,  697,  697,  697,  697,  697,  698,  698,  698,  698,
      698,    0,  695,  699,  699,  699,  699,  699,  700,  700,

      700,  700,  700,  696,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,    0,
      697,  703,    0,    0,    0,  698,  704,  704,  704,  704,
      704,    0,    0,    0,  699,  705,  705,  705,  705,  705,
        0,    0,  702,    0,  700,    0,    0,    0,    0,  701,
      706,  706,  706,  706,  706,  707,  707,  707,  707,  707,
      708,  708,  708,  708,  708,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      712,  712,  712,  712,  712,    0,    0,    0,  711,  713,
      713,  713,  713,  713,  707,    0,    0,    0,  709,    0,

      706,  714,  714,  714,  714,  714,  715,  715,  715,  715,
      715,    0,    0,    0,    0,  708,  712,  716,  716,  716,
      716,  716,  717,  717,  717,  717,  717,  718,  718,  718,
      718,  718,  719,  719,  719,  719,  719,    0,  713,    0,
        0,    0,  714,  720,  720,  720,  720,  720,  721,  721,
      721,  721,  721,    0,  722,  722,  722,  722,  722,    0,
      716,  722,  723,  723,  723,  723,  723,    0,    0,  719,
      724,  724,  724,  724,  724,    0,    0,  718,    0,    0,
      720,  725,  725,  725,  725,  725,  726,  726,  726,  726,
      726,  727,  727,  727,  727,  727,    0,  721,    0,  723,

      728,  728,  728,  728,  728,  730,  730,  730,  730,  730,
      731,  731,  731,  731,  731,    0,  724,  732,  732,  732,
      732,  732,  725,  726,    0,    0,    0,  727,  733,  733,
      733,  733,  733,    0,    0,    0,  732,  734,  734,  734,
      734,  734,    0,  728,  735,  735,  735,  735,  735,  736,
      736,  736,  736,  736,  737,  737,  737,  737,  737,  738,
      738,  738,  738,  738,    0,  733,    0,    0,    0,    0,
      734,  739,  739,  739,  739,  739,  740,  740,  740,  740,
      740,    0,    0,    0,  736,  741,  741,  741,  741,  741,
      745,  745,  745,  745,  745,    0,    0,    0,    0,  737,

      738,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,    0,  740,    0,    0,    0,  739,  748,  748,  748,
      748,  748,    0,    0,    0,  741,  749,  749,  749,  749,
      749,  750,  750,  750,  750,  750,  752,  752,  752,  752,
      752,    0,  745,  753,  753,  753,  753,  753,    0,    0,
        0,  746,  750,  754,  754,  754,  754,  754,  758,  758,
      758,  758,  758,    0,    0,    0,  748,  759,  759,  759,
      759,  759,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  752,  762,  762,  762,  762,  762,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,    0,  754,

      765,  765,  765,  765,  765,  766,  766,  766,  766,  766,
      767,  767,  767,  767,  767,  760,  768,  768,  768,  768,
      768,    0,    0,    0,  762,  761,  769,  769,  769,  769,
      769,  770,  770,  770,  770,  770,  764,  771,  771,  771,
      771,  771,  763,  765,  772,  772,  772,  772,  772,    0,
        0,  766,    0,  767,  773,  773,  773,  773,  773,  774,
      774,  774,  774,  774,    0,  775,  775,  775,  775,  775,
      771,  776,  776,  776,  776,  776,  769,  770,  777,  777,
      777,  777,  777,    0,    0,    0,    0,  772,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  780,  780,

      780,  780,  780,  781,  781,  781,  781,  781,  776,  774,
      775,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  784,  784,  784,  784,  784,  785,  785,  785,  785,
      785,    0,    0,    0,  778,    0,  779,  786,  786,  786,
      786,  786,    0,    0,  780,    0,    0,    0,  781,  787,
      787,  787,  787,  787,  788,  788,  788,  788,  788,  789,
      789,  789,  789,  789,    0,    0,    0,  784,  790,  790,
      790,  790,  790,    0,  792,  792,  792,  792,  792,    0,
      785,  792,    0,  786,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,    0,  787,  789,    0,    0,  788,

        0,    0,    0,    0,  790,  795,  795,  795,  795,  795,
      796,  796,  796,  796,  796,  797,  797,  797,  797,  797,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
        0,    0,  794,  800,  800,  800,  800,  800,    0,    0,
        0,    0,  795,    0,    0,    0,    0,  796,  804,  804,
      804,  804,  804,  805,  805,  805,  805,  805,    0,    0,
      797,  806,  806,  806,  806,  806,  799,    0,    0,  798,
        0,    0,    0,    0,  800,  807,  807,  807,  807,  807,
      809,  809,  809,  809,  809,  804,  810,  810,  810,  810,
      810,  814,  814,  814,  814,  814,  815,  815,  815,  815,

      815,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  818,  818,  818,  818,  818,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,    0,    0,  809,    0,
        0,  810,  821,  821,  821,  821,  821,  814,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  818,    0,
        0,    0,  816,  819,  824,  824,  824,  824,  824,  825,
      825,  825,  825,  825,    0,    0,  820,  826,  826,  826,
      826,  826,    0,    0,    0,  822,    0,    0,  821,  827,
      827,  827,  827,  827,    0,    0,  823,  828,  828,  828,
      828,  828,    0,    0,    0,    0,  825,    0,    0,  824,

      829,  829,  829,  829,  829,    0,    0,    0,  826,  830,
      830,  830,  830,  830,    0,  827,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  828,    0,    0,    0,  829,    0,    0,    0,    0,
      830,  836,  836,  836,  836,  836,  837,  837,  837,  837,
      837,    0,    0,    0,  831,    0,    0,    0,    0,  833,
        0,  832,  838,  838,  838,  838,  838,  839,  839,  839,
      839,  839,    0,    0,  835,  841,  841,  841,  841,  841,
        0,  837,    0,    0,    0,    0,  836,    0,    0,    0,

      841,  843,  843,  843,  843,  843,  844,  844,  844,  844,
      844,  845,  845,  845,  845,  845,    0,  843,    0,    0,
      838,  846,  846,  846,  846,  846,    0,    0,  844,    0,
        0,    0,    0,  845,  847,  847,  847,  847,  847,  848,
      848,  848,  848,  848,  849,  849,  849,  849,  849,  853,
      853,  853,  853,  853,    0,    0,  853,  846,  855,  855,
      855,  855,  855,  856,  856,  856,  856,  856,    0,    0,
        0,    0,  847,  860,  860,  860,  860,  860,    0,  849,
        0,    0,    0,    0,  848,  861,  861,  861,  861,  861,
        0,    0,    0,    0,  855,  862,  862,  862,  862,  862,

      863,  863,  863,  863,  863,  864,  864,  864,  864,  864,
      865,  865,  865,  865,  865,  866,  866,  866,  866,  866,
        0,  860,  867,  867,  867,  867,  867,  868,  868,  868,
      868,  868,    0,    0,  861,  869,  869,  869,  869,  869,
      870,  870,  870,  870,  870,  871,  871,  871,  871,  871,
      872,  872,  872,  872,  872,    0,    0,    0,  865,    0,
        0,    0,  868,  873,  873,  873,  873,  873,  867,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  875,    0,
        0,    0,  871,    0,    0,    0,  870,  876,  876,  876,
      876,  876,  877,  877,  877,  877,  877,  878,  878,  878,

      878,  878,  879,  879,  879,  879,  879,  880,  880,  880,
      880,  880,    0,    0,  874,  881,  881,  881,  881,  881,
      876,  883,  883,  883,  883,  883,  884,  884,  884,  884,
      884,    0,    0,  878,    0,    0,    0,    0,  877,  885,
      885,  885,  885,  885,    0,    0,    0,  883,  886,  886,
      886,  886,  886,    0,    0,    0,  881,  887,  887,  887,
      887,  887,  880,    0,    0,    0,    0,  884,  888,  888,
      888,  888,  888,    0,    0,    0,  885,  889,  889,  889,
      889,  889,    0,    0,    0,  886,  890,  890,  890,  890,
      890,    0,    0,  890,    0,    0,    0,    0,  887,  894,

      894,  894,  894,  894,  896,  896,  896,  896,  896,  900,
      900,  900,  900,  900,  888,    0,  889,  901,  901,  901,
      901,  901,  902,  902,  902,  902,  902,  903,  903,  903,
      903,  903,  894,  904,  904,  904,  904,  904,  905,  905,
      905,  905,  905,    0,    0,  896,  906,  906,  906,  906,
      906,  907,  907,  907,  907,  907,  908,  908,  908,  908,
      908,  909,  909,  909,  909,  909,    0,    0,    0,    0,
      904,    0,    0,    0,    0,  903,  910,  910,  910,  910,
      910,    0,    0,  905,  911,  911,  911,  911,  911,  910,
      907,  912,  912,  912,  912,  912,    0,    0,    0,    0,

      906,  914,  914,  914,  914,  914,  908,    0,    0,  909,
        0,    0,    0,    0,  914,  915,  915,  915,  915,  915,
      916,  916,  916,  916,  916,  917,  917,  917,  917,  917,
        0,  918,  918,  918,  918,  918,  912,  919,  919,  919,
      919,  919,  920,  920,  920,  920,  920,  921,  921,  921,
      921,  921,    0,    0,  915,  925,  925,  925,  925,  925,
      927,  927,  927,  927,  927,  931,  931,  931,  931,  931,
      916,    0,    0,    0,    0,  917,  918,    0,    0,    0,
      921,    0,    0,    0,    0,  919,  932,  932,  932,  932,
      932,  933,  933,  933,  933,  933,    0,    0,    0,  925,

      934,  934,  934,  934,  934,  927,  935,  935,  935,  935,
      935,  936,  936,  936,  936,  936,  937,  937,  937,  937,
      937,  938,  938,  938,  938,  938,  939,  939,  939,  939,
      939,  941,  941,  941,  941,  941,  942,  942,  942,  942,
      942,  943,  943,  943,  943,  943,  944,  944,  944,  944,
      944,    0,  936,  941,  945,  945,  945,  945,  945,  946,
      946,  946,  946,  946,    0,  939,  938,  947,  947,  947,
      947,  947,    0,    0,    0,    0,  942,  951,  951,  951,
      951,  951,  953,  953,  953,  953,  953,  957,  957,  957,
      957,  957,    0,  945,  958,  958,  958,  958,  958,    0,

        0,    0,    0,  946,  959,  959,  959,  959,  959,    0,
        0,  947,    0,    0,  951,  953,  961,  961,  961,  961,
      961,    0,    0,    0,    0,  961,    0,    0,    0,    0,
      958,    0,    0,  957,  962,  962,  962,  962,  962,  963,
      963,  963,  963,  963,  964,  964,  964,  964,  964,  965,
      965,  965,  965,  965,  969,  969,  969,  969,  969,  971,
      971,  971,  971,  971,    0,  975,  975,  975,  975,  975,
      976,  976,  976,  976,  976,  978,  978,  978,  978,  978,
        0,    0,    0,    0,  962,    0,  965,  979,  979,  979,
      979,  979,  980,  980,  980,  980,  980,  984,  984,  984,

      984,  984,  969,    0,    0,    0,    0,  976,    0,  971,
      975,  986,  986,  986,  986,  986,  990,  990,  990,  990,
      990,  991,  991,  991,  991,  991,    0,    0,    0,    0,
      984,  992,  992,  992,  992,  992,    0,    0,    0,    0,
      980,  994,  994,  994,  994,  994,    0,    0,  986,  996,
      996,  996,  996,  996,  999,  999,  999,  999,  999, 1000,
     1000, 1000, 1000, 1000,  992,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  991, 1005,    0,    0, 1005,
     1005, 1006,    0, 1006, 1006, 1006, 1007, 1007, 1008,    0,
     1008, 1008, 1008, 1010, 1010, 1011,    0,    0, 1011, 1011,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[153] =
    {   0,
       43,   47,   51,   57,   63,   69,   73,   77,   81,   85,
       89,   93,   97,  101,  105,  109,  113,  117,  121,  125,
      129,  133,  137,  141,  145,  149,  153,  157,  161,  165,
      169,  173,  177,  181,  185,  189,  193,  197,  201,  205,
      209,  213,  217,  221,  225,  229,  233,  237,  241,  245,
      249,  253,  257,  261,  265,  269,  273,  277,  281,  285,
      289,  294,  298,  302,  306,  310,  314,  318,  322,  326,
      330,  334,  338,  342,  346,  350,  354,  358,  362,  366,
      370,  374,  378,  382,  386,  390,  394,  398,  402,  406,
      410,  414,  418,  422,  426,  430,  434,  438,  442,  446,

      450,  454,  458,  462,  466,  470,  474,  478,  482,  486,
      490,  494,  498,  502,  506,  510,  514,  518,  522,  526,
      530,  534,  538,  542,  546,  550,  554,  558,  562,  566,
      570,  574,  578,  582,  586,  590,  594,  599,  605,  609,
      613,  617,  621,  625,  629,  633,  638,  642,  646,  650,
      655,  658
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "vrml1-scanner.ll"
#line 2 "vrml1-scanner.ll"
#include <cstdlib>
#include <errno.h>
#include <limits.h>
#include <string>
#include "convert.hh"
#include "Driver.hh"
#include "vrml1-parser.hh"
     
/* Work around an incompatibility in flex (at least versions
   2.5.31 through 2.5.33): it generates code that does
   not conform to C89.  See Debian bug 333231
   <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */

#undef yywrap
#define yywrap() 1
     
/* By default yylex returns int, we use token_type.
   Unfortunately yyterminate by default returns 0, which is
   not of token_type.  */

#define yyterminate() return token::END
#line 2422 "vrml1-scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */

// closed by serhat
//////////////////////////////////#include <unistd.h>

/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 36 "vrml1-scanner.ll"



  typedef vrml1::vrml1_parser::token token;



#line 2640 "vrml1-scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1005 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1004 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 153 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 153 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 154 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 43 "vrml1-scanner.ll"
{
					return token::KW_ZERO;
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "vrml1-scanner.ll"
{
					return token::KW_ONE;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 51 "vrml1-scanner.ll"
{
					from_string<int>(yylval->ival, std::string(yytext), std::hex);
					return token::TYPE_INTEGER;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "vrml1-scanner.ll"
{
					from_string<int>(yylval->ival, std::string(yytext), std::dec);
					return token::TYPE_INTEGER;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "vrml1-scanner.ll"
{
					from_string<float>(yylval->fval, std::string(yytext), std::dec);
					return token::TYPE_FLOAT;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 69 "vrml1-scanner.ll"
{
					return token::KW_ALL;
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 73 "vrml1-scanner.ll"
{	
					return token::KW_AUTO;
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "vrml1-scanner.ll"
{
					return token::KW_AsciiText;
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 81 "vrml1-scanner.ll"
{	
					return token::KW_BOLD;
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "vrml1-scanner.ll"
{	
					return token::KW_BOTTOM;
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "vrml1-scanner.ll"
{	
					return token::KW_CENTER;
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "vrml1-scanner.ll"
{	
					return token::KW_CLAMP;
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "vrml1-scanner.ll"
{	
					return token::KW_CLOCKWISE;
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "vrml1-scanner.ll"
{	
					return token::KW_CONVEX;
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 105 "vrml1-scanner.ll"
{	
					return token::KW_COUNTERCLOCKWISE;
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 109 "vrml1-scanner.ll"
{	
					return token::KW_Cone;
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 113 "vrml1-scanner.ll"
{	
					return token::KW_Coordinate3;
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "vrml1-scanner.ll"
{	
					return token::KW_Cube;
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 121 "vrml1-scanner.ll"
{	
					return token::KW_Cylinder;
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 125 "vrml1-scanner.ll"
{	
					return token::KW_DEF;
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "vrml1-scanner.ll"
{	
					return token::KW_DEFAULT;
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "vrml1-scanner.ll"
{	
					return token::KW_DirectionalLight;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 137 "vrml1-scanner.ll"
{	
					return token::KW_FALSE;
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "vrml1-scanner.ll"
{	
					return token::KW_FontStyle;
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 145 "vrml1-scanner.ll"
{	
					return token::KW_ITALIC;
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 149 "vrml1-scanner.ll"
{	
					return token::KW_IndexedFaceSet;
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "vrml1-scanner.ll"
{	
					return token::KW_IndexedLineSet;
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 157 "vrml1-scanner.ll"
{	
					return token::KW_LEFT;
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 161 "vrml1-scanner.ll"
{	
					return token::KW_LOD;
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 165 "vrml1-scanner.ll"
{	
					return token::KW_Material;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "vrml1-scanner.ll"
{	
					return token::KW_MaterialBinding;
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 173 "vrml1-scanner.ll"
{	
					return token::KW_MatrixTransform;
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 177 "vrml1-scanner.ll"
{	
					return token::KW_NONE;
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 181 "vrml1-scanner.ll"
{	
					return token::KW_Normal;
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 185 "vrml1-scanner.ll"
{	
					return token::KW_NormalBinding;
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 189 "vrml1-scanner.ll"
{	
					return token::KW_OFF;
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 193 "vrml1-scanner.ll"
{	
					return token::KW_ON;
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 197 "vrml1-scanner.ll"
{	
					return token::KW_OVERALL;
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 201 "vrml1-scanner.ll"
{	
					return token::KW_OrthographicCamera;
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "vrml1-scanner.ll"
{	
					return token::KW_PER_FACE;
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 209 "vrml1-scanner.ll"
{	
					return token::KW_PER_FACE_INDEXED;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 213 "vrml1-scanner.ll"
{	
					return token::KW_PER_PART;
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 217 "vrml1-scanner.ll"
{	
					return token::KW_PER_PART_INDEXED;
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 221 "vrml1-scanner.ll"
{	
					return token::KW_PER_VERTEX;
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 225 "vrml1-scanner.ll"
{	
					return token::KW_PER_VERTEX_INDEXED;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 229 "vrml1-scanner.ll"
{	
					return token::KW_POINT;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "vrml1-scanner.ll"
{	
					return token::KW_PerspectiveCamera;
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 237 "vrml1-scanner.ll"
{	
					return token::KW_PointLight;
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 241 "vrml1-scanner.ll"
{	
					return token::KW_PointSet;
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 245 "vrml1-scanner.ll"
{	
					return token::KW_REPEAT;
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 249 "vrml1-scanner.ll"
{	
					return token::KW_RIGHT;
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 253 "vrml1-scanner.ll"
{	
					return token::KW_Rotation;
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 257 "vrml1-scanner.ll"
{	
					return token::KW_SANS;
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 261 "vrml1-scanner.ll"
{	
					return token::KW_SERIF;
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "vrml1-scanner.ll"
{	
					return token::KW_SIDES;
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 269 "vrml1-scanner.ll"
{	
					return token::KW_SOLID;
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 273 "vrml1-scanner.ll"
{	
					return token::KW_Scale;
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 277 "vrml1-scanner.ll"
{	
					return token::KW_Separator;
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 281 "vrml1-scanner.ll"
{	
					return token::KW_ShapeHints;
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 285 "vrml1-scanner.ll"
{	
					return token::KW_Sphere;
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 289 "vrml1-scanner.ll"
{	
					return token::KW_SpotLight;
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 294 "vrml1-scanner.ll"
{	
					return token::KW_Switch;
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 298 "vrml1-scanner.ll"
{	
					return token::KW_TOP;
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 302 "vrml1-scanner.ll"
{	
					return token::KW_TRUE;
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 306 "vrml1-scanner.ll"
{	
					return token::KW_TYPEWRITER;
			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 310 "vrml1-scanner.ll"
{	
					return token::KW_Texture2;
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 314 "vrml1-scanner.ll"
{	
					return token::KW_Texture2Transform;
			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 318 "vrml1-scanner.ll"
{	
					return token::KW_TextureCoordinate2;
			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 322 "vrml1-scanner.ll"
{	
					return token::KW_Transform;
			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 326 "vrml1-scanner.ll"
{	
					return token::KW_Translation;
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 330 "vrml1-scanner.ll"
{	
					return token::KW_UNKNOWN_FACE_TYPE;
			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 334 "vrml1-scanner.ll"
{	
					return token::KW_UNKNOWN_ORDERING;
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 338 "vrml1-scanner.ll"
{	
					return token::KW_UNKNOWN_SHAPE_TYPE;
			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 342 "vrml1-scanner.ll"
{	
					return token::KW_USE;
			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 346 "vrml1-scanner.ll"
{	
					return token::KW_WWWAnchor;
			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 350 "vrml1-scanner.ll"
{	
					return token::KW_WWWInline;
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 354 "vrml1-scanner.ll"
{	
					return token::KW_ambientColor;
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 358 "vrml1-scanner.ll"
{	
					return token::KW_bboxCenter;
			}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 362 "vrml1-scanner.ll"
{	
				return token::KW_bboxSize;
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 366 "vrml1-scanner.ll"
{	
					return token::KW_bottomRadius;
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 370 "vrml1-scanner.ll"
{	
					return token::KW_center;
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 374 "vrml1-scanner.ll"
{	
					return token::KW_color;
			}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 378 "vrml1-scanner.ll"
{	
					return token::KW_coordIndex;
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 382 "vrml1-scanner.ll"
{	
					return token::KW_creaseAngle;
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 386 "vrml1-scanner.ll"
{	
					return token::KW_cutOffAngle;
			}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 390 "vrml1-scanner.ll"
{	
					return token::KW_depth;
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 394 "vrml1-scanner.ll"
{	
					return token::KW_description;
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 398 "vrml1-scanner.ll"
{	
					return token::KW_diffuseColor;
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 402 "vrml1-scanner.ll"
{	
					return token::KW_direction;
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 406 "vrml1-scanner.ll"
{	
					return token::KW_dropOffRate;
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 410 "vrml1-scanner.ll"
{	
					return token::KW_emissiveColor;
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 414 "vrml1-scanner.ll"
{	
					return token::KW_faceType;
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 418 "vrml1-scanner.ll"
{	
					return token::KW_family;
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 422 "vrml1-scanner.ll"
{	
					return token::KW_filename;
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 426 "vrml1-scanner.ll"
{	
					return token::KW_focalDistance;
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 430 "vrml1-scanner.ll"
{	
					return token::KW_height;
			}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 434 "vrml1-scanner.ll"
{	
					return token::KW_heightAngle;
			}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 438 "vrml1-scanner.ll"
{	
					return token::KW_image;
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 442 "vrml1-scanner.ll"
{	
					return token::KW_intensity;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 446 "vrml1-scanner.ll"
{	
					return token::KW_justification;
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 450 "vrml1-scanner.ll"
{	
					return token::KW_location;
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 454 "vrml1-scanner.ll"
{	
					return token::KW_map;
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 458 "vrml1-scanner.ll"
{	
					return token::KW_materialIndex;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 462 "vrml1-scanner.ll"
{	
					return token::KW_matrix;
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 466 "vrml1-scanner.ll"
{	
					return token::KW_name;
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 470 "vrml1-scanner.ll"
{	
					return token::KW_normalIndex;
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 474 "vrml1-scanner.ll"
{	
					return token::KW_numPoints;
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 478 "vrml1-scanner.ll"
{	
				return token::KW_on;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 482 "vrml1-scanner.ll"
{	
					return token::KW_orientation;	
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 486 "vrml1-scanner.ll"
{	
					return token::KW_parts;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 490 "vrml1-scanner.ll"
{	
					return token::KW_point;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 494 "vrml1-scanner.ll"
{	
					return token::KW_position;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 498 "vrml1-scanner.ll"
{	
					return token::KW_radius;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 502 "vrml1-scanner.ll"
{	
					return token::KW_range;
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 506 "vrml1-scanner.ll"
{	
					return token::KW_renderCulling;
			}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 510 "vrml1-scanner.ll"
{	
					return token::KW_rotation;
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 514 "vrml1-scanner.ll"
{	
					return token::KW_scaleFactor;
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 518 "vrml1-scanner.ll"
{	
					return token::KW_scaleOrientation;
			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 522 "vrml1-scanner.ll"
{					
					return token::KW_shapeType;
			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 526 "vrml1-scanner.ll"
{	
					return token::KW_shininess;
			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 530 "vrml1-scanner.ll"
{	
					return token::KW_size;
			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 534 "vrml1-scanner.ll"
{	
					return token::KW_spacing;
			}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 538 "vrml1-scanner.ll"
{	
					return token::KW_specularColor;
			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 542 "vrml1-scanner.ll"
{	
					return token::KW_startIndex;
			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 546 "vrml1-scanner.ll"
{	
					return token::KW_string;
			}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 550 "vrml1-scanner.ll"
{	
					return token::KW_style;
			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 554 "vrml1-scanner.ll"
{	
					return token::KW_textureCoordIndex;
			}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 558 "vrml1-scanner.ll"
{	
					return token::KW_translation;
			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 562 "vrml1-scanner.ll"
{	
					return token::KW_transparency;
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 566 "vrml1-scanner.ll"
{	
					return token::KW_value;
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 570 "vrml1-scanner.ll"
{	
					return token::KW_vector;
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 574 "vrml1-scanner.ll"
{	
					return token::KW_vertexOrdering;
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 578 "vrml1-scanner.ll"
{	
					return token::KW_whichChild;
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 582 "vrml1-scanner.ll"
{	
					return token::KW_width;
			}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 586 "vrml1-scanner.ll"
{	
					return token::KW_wrapS;
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 590 "vrml1-scanner.ll"
{	
					return token::KW_wrapT;
			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 594 "vrml1-scanner.ll"
{	
				yylval->sval = new string(yytext);
				return token::TYPE_STRING;
			}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 599 "vrml1-scanner.ll"
{
				yylval->sval = new string(yytext);
				return token::TYPE_STRING;
			}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 605 "vrml1-scanner.ll"
{
				return token::KW_BRACKETOPEN;
			}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 609 "vrml1-scanner.ll"
{
				return token::KW_BRACKETCLOSE;
			}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 613 "vrml1-scanner.ll"
{
				return token::KW_SQUAREDBRACKETOPEN;
			}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 617 "vrml1-scanner.ll"
{
				return token::KW_SQUAREDBRACKETCLOSE;
			}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 621 "vrml1-scanner.ll"
{
				return token::KW_LEFTPARENTHESIS;
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 625 "vrml1-scanner.ll"
{
				return token::KW_RIGHTPARENTHESIS;
			}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 629 "vrml1-scanner.ll"
{
				return token::KW_BAR;
			}			
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 633 "vrml1-scanner.ll"
{
					return token::KW_COMMA;
			}			
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 638 "vrml1-scanner.ll"
{
				return token::KW_VRML_ID;
			}	
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 642 "vrml1-scanner.ll"
{
			}		
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 646 "vrml1-scanner.ll"
{
				/* eat up */
			}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 650 "vrml1-scanner.ll"
{
				/* eat up */
			}			
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 655 "vrml1-scanner.ll"
{
			}			
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 658 "vrml1-scanner.ll"
{
			}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 661 "vrml1-scanner.ll"
ECHO;
	YY_BREAK
#line 3822 "vrml1-scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1005 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1005 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1004);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef _UNISTD_H /* assume unistd.h has isatty() for us */
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __THROW /* this is a gnuism */
extern int isatty (int ) __THROW;
#else
extern int isatty (int );
#endif
#ifdef __cplusplus
}
#endif
#endif
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 661 "vrml1-scanner.ll"



namespace vrml1 {

void Driver::scan_begin () {

	yy_flex_debug = trace_scanning;
	
	if (!(yyin = fopen (file.c_str (), "r")))
		error (std::string ("cannot open ") + file);
}
     
void Driver::scan_end ()  {
	fclose (yyin);
}

}

